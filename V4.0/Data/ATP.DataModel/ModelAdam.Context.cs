//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ATP.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<uspSelVehAlertByVehGuid_Result> uspSelVehAlertByVehGuid(Nullable<System.Guid> vehcileGuid)
        {
            var vehcileGuidParameter = vehcileGuid.HasValue ?
                new ObjectParameter("vehcileGuid", vehcileGuid) :
                new ObjectParameter("vehcileGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehAlertByVehGuid_Result>("uspSelVehAlertByVehGuid", vehcileGuidParameter);
        }
    
        public virtual ObjectResult<uspSelVehAlertByVehSvcGuid_Result> uspSelVehAlertByVehSvcGuid(Nullable<System.Guid> vehcileServiceGuid)
        {
            var vehcileServiceGuidParameter = vehcileServiceGuid.HasValue ?
                new ObjectParameter("vehcileServiceGuid", vehcileServiceGuid) :
                new ObjectParameter("vehcileServiceGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehAlertByVehSvcGuid_Result>("uspSelVehAlertByVehSvcGuid", vehcileServiceGuidParameter);
        }
    
        public virtual ObjectResult<uspLkpTables_Result> uspLkpTables(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLkpTables_Result>("uspLkpTables", tableNameParameter);
        }
    
        public virtual int uspInsVehAlert(Nullable<int> alertId, Nullable<System.Guid> vehicleGUID, Nullable<System.Guid> vehicleServiceGUID, Nullable<System.Guid> techGUID, Nullable<bool> responseRequested, Nullable<System.DateTime> sent, Nullable<bool> retrieved, Nullable<byte> response, Nullable<byte> responseSource, Nullable<System.DateTime> responseReceived, string text, Nullable<System.DateTime> entered)
        {
            var alertIdParameter = alertId.HasValue ?
                new ObjectParameter("AlertId", alertId) :
                new ObjectParameter("AlertId", typeof(int));
    
            var vehicleGUIDParameter = vehicleGUID.HasValue ?
                new ObjectParameter("VehicleGUID", vehicleGUID) :
                new ObjectParameter("VehicleGUID", typeof(System.Guid));
    
            var vehicleServiceGUIDParameter = vehicleServiceGUID.HasValue ?
                new ObjectParameter("VehicleServiceGUID", vehicleServiceGUID) :
                new ObjectParameter("VehicleServiceGUID", typeof(System.Guid));
    
            var techGUIDParameter = techGUID.HasValue ?
                new ObjectParameter("TechGUID", techGUID) :
                new ObjectParameter("TechGUID", typeof(System.Guid));
    
            var responseRequestedParameter = responseRequested.HasValue ?
                new ObjectParameter("ResponseRequested", responseRequested) :
                new ObjectParameter("ResponseRequested", typeof(bool));
    
            var sentParameter = sent.HasValue ?
                new ObjectParameter("Sent", sent) :
                new ObjectParameter("Sent", typeof(System.DateTime));
    
            var retrievedParameter = retrieved.HasValue ?
                new ObjectParameter("Retrieved", retrieved) :
                new ObjectParameter("Retrieved", typeof(bool));
    
            var responseParameter = response.HasValue ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(byte));
    
            var responseSourceParameter = responseSource.HasValue ?
                new ObjectParameter("ResponseSource", responseSource) :
                new ObjectParameter("ResponseSource", typeof(byte));
    
            var responseReceivedParameter = responseReceived.HasValue ?
                new ObjectParameter("ResponseReceived", responseReceived) :
                new ObjectParameter("ResponseReceived", typeof(System.DateTime));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsVehAlert", alertIdParameter, vehicleGUIDParameter, vehicleServiceGUIDParameter, techGUIDParameter, responseRequestedParameter, sentParameter, retrievedParameter, responseParameter, responseSourceParameter, responseReceivedParameter, textParameter, enteredParameter);
        }
    
        public virtual ObjectResult<uspVerifySendAlertsUser_Result> uspVerifySendAlertsUser(Nullable<int> dealerId, string userName, string password, string roles)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVerifySendAlertsUser_Result>("uspVerifySendAlertsUser", dealerIdParameter, userNameParameter, passwordParameter, rolesParameter);
        }
    
        public virtual ObjectResult<uspInsVehicleAlert_Result> uspInsVehicleAlert(Nullable<int> id, Nullable<int> alertId, Nullable<System.Guid> vehicleGUID, Nullable<System.Guid> techGUID, Nullable<bool> responseRequested, Nullable<System.DateTime> sent, Nullable<bool> retrieved, Nullable<byte> response, Nullable<byte> responseSource, Nullable<System.DateTime> responseReceived, string text, Nullable<System.DateTime> entered)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var alertIdParameter = alertId.HasValue ?
                new ObjectParameter("AlertId", alertId) :
                new ObjectParameter("AlertId", typeof(int));
    
            var vehicleGUIDParameter = vehicleGUID.HasValue ?
                new ObjectParameter("VehicleGUID", vehicleGUID) :
                new ObjectParameter("VehicleGUID", typeof(System.Guid));
    
            var techGUIDParameter = techGUID.HasValue ?
                new ObjectParameter("TechGUID", techGUID) :
                new ObjectParameter("TechGUID", typeof(System.Guid));
    
            var responseRequestedParameter = responseRequested.HasValue ?
                new ObjectParameter("ResponseRequested", responseRequested) :
                new ObjectParameter("ResponseRequested", typeof(bool));
    
            var sentParameter = sent.HasValue ?
                new ObjectParameter("Sent", sent) :
                new ObjectParameter("Sent", typeof(System.DateTime));
    
            var retrievedParameter = retrieved.HasValue ?
                new ObjectParameter("Retrieved", retrieved) :
                new ObjectParameter("Retrieved", typeof(bool));
    
            var responseParameter = response.HasValue ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(byte));
    
            var responseSourceParameter = responseSource.HasValue ?
                new ObjectParameter("ResponseSource", responseSource) :
                new ObjectParameter("ResponseSource", typeof(byte));
    
            var responseReceivedParameter = responseReceived.HasValue ?
                new ObjectParameter("ResponseReceived", responseReceived) :
                new ObjectParameter("ResponseReceived", typeof(System.DateTime));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsVehicleAlert_Result>("uspInsVehicleAlert", idParameter, alertIdParameter, vehicleGUIDParameter, techGUIDParameter, responseRequestedParameter, sentParameter, retrievedParameter, responseParameter, responseSourceParameter, responseReceivedParameter, textParameter, enteredParameter);
        }
    
        public virtual ObjectResult<uspInsVehicleService_Result> uspInsVehicleService(Nullable<System.Guid> gUID, Nullable<System.Guid> vehicleGUID, Nullable<int> dealerId, Nullable<byte> statusId, Nullable<int> kioskId, Nullable<System.Guid> creditCardGUID, string keyId, string kioskMachineId, Nullable<System.DateTime> date, Nullable<short> time, Nullable<int> mileage, string reason, string rONumber, Nullable<bool> paid, Nullable<decimal> amount, Nullable<bool> aDAM, Nullable<decimal> serviceCost, Nullable<decimal> packageCost, Nullable<System.DateTime> droppedOff, Nullable<System.DateTime> pickedUp, Nullable<short> expressNumber, Nullable<bool> contactByText, string contactText, string contactEmail, string contactCellPhone, string contactHomePhone, string contactWorkPhone, string couponCode, byte[] signature, Nullable<System.DateTime> cloudSync, Nullable<System.DateTime> dMSSync, Nullable<bool> valid, Nullable<System.Guid> enteredBy, Nullable<System.DateTime> entered)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var vehicleGUIDParameter = vehicleGUID.HasValue ?
                new ObjectParameter("VehicleGUID", vehicleGUID) :
                new ObjectParameter("VehicleGUID", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            var kioskIdParameter = kioskId.HasValue ?
                new ObjectParameter("KioskId", kioskId) :
                new ObjectParameter("KioskId", typeof(int));
    
            var creditCardGUIDParameter = creditCardGUID.HasValue ?
                new ObjectParameter("CreditCardGUID", creditCardGUID) :
                new ObjectParameter("CreditCardGUID", typeof(System.Guid));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var kioskMachineIdParameter = kioskMachineId != null ?
                new ObjectParameter("KioskMachineId", kioskMachineId) :
                new ObjectParameter("KioskMachineId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(short));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var rONumberParameter = rONumber != null ?
                new ObjectParameter("RONumber", rONumber) :
                new ObjectParameter("RONumber", typeof(string));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(bool));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var aDAMParameter = aDAM.HasValue ?
                new ObjectParameter("ADAM", aDAM) :
                new ObjectParameter("ADAM", typeof(bool));
    
            var serviceCostParameter = serviceCost.HasValue ?
                new ObjectParameter("ServiceCost", serviceCost) :
                new ObjectParameter("ServiceCost", typeof(decimal));
    
            var packageCostParameter = packageCost.HasValue ?
                new ObjectParameter("PackageCost", packageCost) :
                new ObjectParameter("PackageCost", typeof(decimal));
    
            var droppedOffParameter = droppedOff.HasValue ?
                new ObjectParameter("DroppedOff", droppedOff) :
                new ObjectParameter("DroppedOff", typeof(System.DateTime));
    
            var pickedUpParameter = pickedUp.HasValue ?
                new ObjectParameter("PickedUp", pickedUp) :
                new ObjectParameter("PickedUp", typeof(System.DateTime));
    
            var expressNumberParameter = expressNumber.HasValue ?
                new ObjectParameter("ExpressNumber", expressNumber) :
                new ObjectParameter("ExpressNumber", typeof(short));
    
            var contactByTextParameter = contactByText.HasValue ?
                new ObjectParameter("ContactByText", contactByText) :
                new ObjectParameter("ContactByText", typeof(bool));
    
            var contactTextParameter = contactText != null ?
                new ObjectParameter("ContactText", contactText) :
                new ObjectParameter("ContactText", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactCellPhoneParameter = contactCellPhone != null ?
                new ObjectParameter("ContactCellPhone", contactCellPhone) :
                new ObjectParameter("ContactCellPhone", typeof(string));
    
            var contactHomePhoneParameter = contactHomePhone != null ?
                new ObjectParameter("ContactHomePhone", contactHomePhone) :
                new ObjectParameter("ContactHomePhone", typeof(string));
    
            var contactWorkPhoneParameter = contactWorkPhone != null ?
                new ObjectParameter("ContactWorkPhone", contactWorkPhone) :
                new ObjectParameter("ContactWorkPhone", typeof(string));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(byte[]));
    
            var cloudSyncParameter = cloudSync.HasValue ?
                new ObjectParameter("CloudSync", cloudSync) :
                new ObjectParameter("CloudSync", typeof(System.DateTime));
    
            var dMSSyncParameter = dMSSync.HasValue ?
                new ObjectParameter("DMSSync", dMSSync) :
                new ObjectParameter("DMSSync", typeof(System.DateTime));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsVehicleService_Result>("uspInsVehicleService", gUIDParameter, vehicleGUIDParameter, dealerIdParameter, statusIdParameter, kioskIdParameter, creditCardGUIDParameter, keyIdParameter, kioskMachineIdParameter, dateParameter, timeParameter, mileageParameter, reasonParameter, rONumberParameter, paidParameter, amountParameter, aDAMParameter, serviceCostParameter, packageCostParameter, droppedOffParameter, pickedUpParameter, expressNumberParameter, contactByTextParameter, contactTextParameter, contactEmailParameter, contactCellPhoneParameter, contactHomePhoneParameter, contactWorkPhoneParameter, couponCodeParameter, signatureParameter, cloudSyncParameter, dMSSyncParameter, validParameter, enteredByParameter, enteredParameter);
        }
    
        public virtual ObjectResult<uspSelDealerById_Result> uspSelDealerById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerById_Result>("uspSelDealerById", idParameter);
        }
    
        public virtual ObjectResult<uspSelDealerFamilies_Result> uspSelDealerFamilies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerFamilies_Result>("uspSelDealerFamilies");
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> uspSelPersonByVIN(string firstName, string lastName, string vIN, string deviceId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("uspSelPersonByVIN", firstNameParameter, lastNameParameter, vINParameter, deviceIdParameter);
        }
    
        public virtual ObjectResult<uspSelServicePackages_Result> uspSelServicePackages(Nullable<int> dealerId, Nullable<byte> typeId, string typeCode, string typeName, Nullable<int> makeId, Nullable<int> modelId, Nullable<int> mileage, Nullable<byte> months)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(byte));
    
            var typeCodeParameter = typeCode != null ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(string));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("Months", months) :
                new ObjectParameter("Months", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelServicePackages_Result>("uspSelServicePackages", dealerIdParameter, typeIdParameter, typeCodeParameter, typeNameParameter, makeIdParameter, modelIdParameter, mileageParameter, monthsParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleMakes_Result> uspSelVehicleMakes(Nullable<int> dealerId, Nullable<int> manufacturerId, string manufacturer, Nullable<int> makeId, string make, Nullable<short> year, Nullable<short> pageNumber, Nullable<short> pageSize)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleMakes_Result>("uspSelVehicleMakes", dealerIdParameter, manufacturerIdParameter, manufacturerParameter, makeIdParameter, makeParameter, yearParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleModels_Result> uspSelVehicleModels(Nullable<int> makeId, string make, Nullable<int> modelId, string model, Nullable<short> year, Nullable<short> pageNumber, Nullable<short> pageSize)
        {
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleModels_Result>("uspSelVehicleModels", makeIdParameter, makeParameter, modelIdParameter, modelParameter, yearParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleTrims_Result> uspSelVehicleTrims(Nullable<int> makeId, string make, Nullable<int> modelId, string model, Nullable<int> trimId, string trim, Nullable<byte> styleId, string styleCode, string style, Nullable<short> year, Nullable<short> pageNumber, Nullable<short> pageSize)
        {
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var trimIdParameter = trimId.HasValue ?
                new ObjectParameter("TrimId", trimId) :
                new ObjectParameter("TrimId", typeof(int));
    
            var trimParameter = trim != null ?
                new ObjectParameter("Trim", trim) :
                new ObjectParameter("Trim", typeof(string));
    
            var styleIdParameter = styleId.HasValue ?
                new ObjectParameter("StyleId", styleId) :
                new ObjectParameter("StyleId", typeof(byte));
    
            var styleCodeParameter = styleCode != null ?
                new ObjectParameter("StyleCode", styleCode) :
                new ObjectParameter("StyleCode", typeof(string));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleTrims_Result>("uspSelVehicleTrims", makeIdParameter, makeParameter, modelIdParameter, modelParameter, trimIdParameter, trimParameter, styleIdParameter, styleCodeParameter, styleParameter, yearParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSelVehicleYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSelVehicleYear");
        }
    
        public virtual ObjectResult<uspValidateCustomer_Result> uspValidateCustomer(string firstName, string lastName, string vIN, Nullable<int> dealerId, Nullable<short> dealerFamilyId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspValidateCustomer_Result>("uspValidateCustomer", firstNameParameter, lastNameParameter, vINParameter, dealerIdParameter, dealerFamilyIdParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleAlertById_Result> uspSelVehicleAlertById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleAlertById_Result>("uspSelVehicleAlertById", idParameter);
        }
    
        public virtual ObjectResult<uspSelSvcTypesByPkgIds_Result> uspSelSvcTypesByPkgIds(Nullable<int> dealerId, string packageList)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var packageListParameter = packageList != null ?
                new ObjectParameter("PackageList", packageList) :
                new ObjectParameter("PackageList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelSvcTypesByPkgIds_Result>("uspSelSvcTypesByPkgIds", dealerIdParameter, packageListParameter);
        }
    
        public virtual ObjectResult<string> uspSelDeviceId(string firstName, string lastName, string vIN)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelDeviceId", firstNameParameter, lastNameParameter, vINParameter);
        }
    
        public virtual int uspSetServiceForPhone()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetServiceForPhone");
        }
    
        public virtual ObjectResult<uspSelDealersByFamilyId_Result> uspSelDealersByFamilyId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealersByFamilyId_Result>("uspSelDealersByFamilyId", idParameter);
        }
    
        public virtual ObjectResult<uspSelKioskByMachineId_Result> uspSelKioskByMachineId(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("machineId", machineId) :
                new ObjectParameter("machineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelKioskByMachineId_Result>("uspSelKioskByMachineId", machineIdParameter);
        }
    
        public virtual ObjectResult<uspSelPkgByDealerId_Result> uspSelPkgByDealerId(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPkgByDealerId_Result>("uspSelPkgByDealerId", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspSelSvcTypeByDealerId_Result> uspSelSvcTypeByDealerId(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelSvcTypeByDealerId_Result>("uspSelSvcTypeByDealerId", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspSelNextExpressNumber_Result> uspSelNextExpressNumber(Nullable<int> dealerId, Nullable<System.DateTime> scheduleDate)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelNextExpressNumber_Result>("uspSelNextExpressNumber", dealerIdParameter, scheduleDateParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleByPersonId_Result> uspSelVehicleByPersonId(Nullable<System.Guid> gUID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleByPersonId_Result>("uspSelVehicleByPersonId", gUIDParameter);
        }
    
        public virtual ObjectResult<uspSelPackageByDealerId_Result> uspSelPackageByDealerId(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPackageByDealerId_Result>("uspSelPackageByDealerId", dealerIdParameter);
        }
    
        public virtual int uspSecurityLogIn(Nullable<byte> environment, string userName, string password, string emailAddress, string phoneNumber, string vIN, Nullable<int> dealerId, Nullable<short> dealerFamilyId, string idCard, string creditCard, Nullable<byte> creditCardMonth, Nullable<short> creditCardYear, string firstName, string middleName, string lastName, string addressLine1, string addressLine2, string addressLine3, string city, string sTP, string zipCode, string zipPlus)
        {
            var environmentParameter = environment.HasValue ?
                new ObjectParameter("Environment", environment) :
                new ObjectParameter("Environment", typeof(byte));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(short));
    
            var idCardParameter = idCard != null ?
                new ObjectParameter("IdCard", idCard) :
                new ObjectParameter("IdCard", typeof(string));
    
            var creditCardParameter = creditCard != null ?
                new ObjectParameter("CreditCard", creditCard) :
                new ObjectParameter("CreditCard", typeof(string));
    
            var creditCardMonthParameter = creditCardMonth.HasValue ?
                new ObjectParameter("CreditCardMonth", creditCardMonth) :
                new ObjectParameter("CreditCardMonth", typeof(byte));
    
            var creditCardYearParameter = creditCardYear.HasValue ?
                new ObjectParameter("CreditCardYear", creditCardYear) :
                new ObjectParameter("CreditCardYear", typeof(short));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var sTPParameter = sTP != null ?
                new ObjectParameter("STP", sTP) :
                new ObjectParameter("STP", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var zipPlusParameter = zipPlus != null ?
                new ObjectParameter("ZipPlus", zipPlus) :
                new ObjectParameter("ZipPlus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSecurityLogIn", environmentParameter, userNameParameter, passwordParameter, emailAddressParameter, phoneNumberParameter, vINParameter, dealerIdParameter, dealerFamilyIdParameter, idCardParameter, creditCardParameter, creditCardMonthParameter, creditCardYearParameter, firstNameParameter, middleNameParameter, lastNameParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, sTPParameter, zipCodeParameter, zipPlusParameter);
        }
    
        public virtual int uspSecurityLogInByCreditCard(Nullable<byte> environment, string creditCard, Nullable<byte> creditCardMonth, Nullable<short> creditCardYear, string firstName, string middleName, string lastName)
        {
            var environmentParameter = environment.HasValue ?
                new ObjectParameter("Environment", environment) :
                new ObjectParameter("Environment", typeof(byte));
    
            var creditCardParameter = creditCard != null ?
                new ObjectParameter("CreditCard", creditCard) :
                new ObjectParameter("CreditCard", typeof(string));
    
            var creditCardMonthParameter = creditCardMonth.HasValue ?
                new ObjectParameter("CreditCardMonth", creditCardMonth) :
                new ObjectParameter("CreditCardMonth", typeof(byte));
    
            var creditCardYearParameter = creditCardYear.HasValue ?
                new ObjectParameter("CreditCardYear", creditCardYear) :
                new ObjectParameter("CreditCardYear", typeof(short));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSecurityLogInByCreditCard", environmentParameter, creditCardParameter, creditCardMonthParameter, creditCardYearParameter, firstNameParameter, middleNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<uspSecurityLogInByIdCard_Result> uspSecurityLogInByIdCard(Nullable<byte> environment, string idCard, string firstName, string middleName, string lastName, string addressLine1, string addressLine2, string addressLine3, string city, string sTP, string zipCode, string zipPlus)
        {
            var environmentParameter = environment.HasValue ?
                new ObjectParameter("Environment", environment) :
                new ObjectParameter("Environment", typeof(byte));
    
            var idCardParameter = idCard != null ?
                new ObjectParameter("IdCard", idCard) :
                new ObjectParameter("IdCard", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var sTPParameter = sTP != null ?
                new ObjectParameter("STP", sTP) :
                new ObjectParameter("STP", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var zipPlusParameter = zipPlus != null ?
                new ObjectParameter("ZipPlus", zipPlus) :
                new ObjectParameter("ZipPlus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecurityLogInByIdCard_Result>("uspSecurityLogInByIdCard", environmentParameter, idCardParameter, firstNameParameter, middleNameParameter, lastNameParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, sTPParameter, zipCodeParameter, zipPlusParameter);
        }
    
        public virtual ObjectResult<uspSecurityLogInByVIN_Result> uspSecurityLogInByVIN(Nullable<byte> environment, string vIN)
        {
            var environmentParameter = environment.HasValue ?
                new ObjectParameter("Environment", environment) :
                new ObjectParameter("Environment", typeof(byte));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecurityLogInByVIN_Result>("uspSecurityLogInByVIN", environmentParameter, vINParameter);
        }
    
        public virtual ObjectResult<uspSecurityLogOut_Result> uspSecurityLogOut(Nullable<System.Guid> gUID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecurityLogOut_Result>("uspSecurityLogOut", gUIDParameter);
        }
    
        public virtual ObjectResult<uspSecurityToken_Result> uspSecurityToken(string token)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecurityToken_Result>("uspSecurityToken", tokenParameter);
        }
    
        public virtual ObjectResult<uspSecurityUpdLogIn_Result> uspSecurityUpdLogIn(Nullable<System.Guid> gUID, string token, Nullable<bool> expired, Nullable<bool> locked, Nullable<System.DateTime> lastLogIn)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var expiredParameter = expired.HasValue ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(bool));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            var lastLogInParameter = lastLogIn.HasValue ?
                new ObjectParameter("LastLogIn", lastLogIn) :
                new ObjectParameter("LastLogIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecurityUpdLogIn_Result>("uspSecurityUpdLogIn", gUIDParameter, tokenParameter, expiredParameter, lockedParameter, lastLogInParameter);
        }
    
        public virtual ObjectResult<uspSecurityLogInByUserName_Result> uspSecurityLogInByUserName(Nullable<byte> environment, string userName, string password)
        {
            var environmentParameter = environment.HasValue ?
                new ObjectParameter("Environment", environment) :
                new ObjectParameter("Environment", typeof(byte));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSecurityLogInByUserName_Result>("uspSecurityLogInByUserName", environmentParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<uspInsPerson_Result> uspInsPerson(Nullable<System.Guid> gUID, Nullable<byte> typeId, string userName, string password, Nullable<bool> expired, Nullable<bool> locked, Nullable<System.DateTime> lastLogIn, string previousUserName, string previousPassword, Nullable<System.DateTime> previousModified, string googleGUID, byte[] signature, Nullable<System.DateTime> signatureUpdated, string note, Nullable<bool> valid, Nullable<System.Guid> enteredBy, Nullable<System.DateTime> entered)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(byte));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var expiredParameter = expired.HasValue ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(bool));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            var lastLogInParameter = lastLogIn.HasValue ?
                new ObjectParameter("LastLogIn", lastLogIn) :
                new ObjectParameter("LastLogIn", typeof(System.DateTime));
    
            var previousUserNameParameter = previousUserName != null ?
                new ObjectParameter("PreviousUserName", previousUserName) :
                new ObjectParameter("PreviousUserName", typeof(string));
    
            var previousPasswordParameter = previousPassword != null ?
                new ObjectParameter("PreviousPassword", previousPassword) :
                new ObjectParameter("PreviousPassword", typeof(string));
    
            var previousModifiedParameter = previousModified.HasValue ?
                new ObjectParameter("PreviousModified", previousModified) :
                new ObjectParameter("PreviousModified", typeof(System.DateTime));
    
            var googleGUIDParameter = googleGUID != null ?
                new ObjectParameter("GoogleGUID", googleGUID) :
                new ObjectParameter("GoogleGUID", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(byte[]));
    
            var signatureUpdatedParameter = signatureUpdated.HasValue ?
                new ObjectParameter("SignatureUpdated", signatureUpdated) :
                new ObjectParameter("SignatureUpdated", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsPerson_Result>("uspInsPerson", gUIDParameter, typeIdParameter, userNameParameter, passwordParameter, expiredParameter, lockedParameter, lastLogInParameter, previousUserNameParameter, previousPasswordParameter, previousModifiedParameter, googleGUIDParameter, signatureParameter, signatureUpdatedParameter, noteParameter, validParameter, enteredByParameter, enteredParameter);
        }
    
        public virtual ObjectResult<uspSelPersonByUserName_Result> uspSelPersonByUserName(Nullable<bool> validOnly, string userName)
        {
            var validOnlyParameter = validOnly.HasValue ?
                new ObjectParameter("ValidOnly", validOnly) :
                new ObjectParameter("ValidOnly", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonByUserName_Result>("uspSelPersonByUserName", validOnlyParameter, userNameParameter);
        }
    
        public virtual ObjectResult<uspSelPersonNameById_Result> uspSelPersonNameById(Nullable<bool> validOnly, Nullable<System.Guid> gUID)
        {
            var validOnlyParameter = validOnly.HasValue ?
                new ObjectParameter("ValidOnly", validOnly) :
                new ObjectParameter("ValidOnly", typeof(bool));
    
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonNameById_Result>("uspSelPersonNameById", validOnlyParameter, gUIDParameter);
        }
    
        public virtual ObjectResult<uspSelPersonTypeById_Result> uspSelPersonTypeById(Nullable<byte> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonTypeById_Result>("uspSelPersonTypeById", idParameter);
        }
    
        public virtual ObjectResult<uspSelPersonTypeByName_Result> uspSelPersonTypeByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonTypeByName_Result>("uspSelPersonTypeByName", nameParameter);
        }
    
        public virtual ObjectResult<uspSelPersonTypeByRole_Result> uspSelPersonTypeByRole(string role)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonTypeByRole_Result>("uspSelPersonTypeByRole", roleParameter);
        }
    
        public virtual ObjectResult<uspUpdPerson_Result> uspUpdPerson(Nullable<System.Guid> gUID, Nullable<byte> typeId, string userName, string password, Nullable<bool> expired, Nullable<bool> locked, Nullable<System.DateTime> lastLogIn, string previousUserName, string previousPassword, Nullable<System.DateTime> previousModified, string googleGUID, byte[] signature, Nullable<System.DateTime> signatureUpdated, string note, Nullable<bool> valid, Nullable<System.Guid> updatedBy, Nullable<System.DateTime> updated)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(byte));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var expiredParameter = expired.HasValue ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(bool));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            var lastLogInParameter = lastLogIn.HasValue ?
                new ObjectParameter("LastLogIn", lastLogIn) :
                new ObjectParameter("LastLogIn", typeof(System.DateTime));
    
            var previousUserNameParameter = previousUserName != null ?
                new ObjectParameter("PreviousUserName", previousUserName) :
                new ObjectParameter("PreviousUserName", typeof(string));
    
            var previousPasswordParameter = previousPassword != null ?
                new ObjectParameter("PreviousPassword", previousPassword) :
                new ObjectParameter("PreviousPassword", typeof(string));
    
            var previousModifiedParameter = previousModified.HasValue ?
                new ObjectParameter("PreviousModified", previousModified) :
                new ObjectParameter("PreviousModified", typeof(System.DateTime));
    
            var googleGUIDParameter = googleGUID != null ?
                new ObjectParameter("GoogleGUID", googleGUID) :
                new ObjectParameter("GoogleGUID", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(byte[]));
    
            var signatureUpdatedParameter = signatureUpdated.HasValue ?
                new ObjectParameter("SignatureUpdated", signatureUpdated) :
                new ObjectParameter("SignatureUpdated", typeof(System.DateTime));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdPerson_Result>("uspUpdPerson", gUIDParameter, typeIdParameter, userNameParameter, passwordParameter, expiredParameter, lockedParameter, lastLogInParameter, previousUserNameParameter, previousPasswordParameter, previousModifiedParameter, googleGUIDParameter, signatureParameter, signatureUpdatedParameter, noteParameter, validParameter, updatedByParameter, updatedParameter);
        }
    
        public virtual ObjectResult<uspSelPersonById_Result> uspSelPersonById(Nullable<System.Guid> gUID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonById_Result>("uspSelPersonById", gUIDParameter);
        }
    
        public virtual ObjectResult<uspInsAddress_Result> uspInsAddress(Nullable<System.Guid> gUID, Nullable<System.Guid> personGUID, Nullable<int> dealerId, Nullable<byte> typeId, Nullable<int> sTPId, Nullable<bool> preferred, string line1, string line2, string line3, string city, string zipCode, string zipPlus, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<bool> valid, Nullable<System.Guid> enteredBy, Nullable<System.DateTime> entered)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(byte));
    
            var sTPIdParameter = sTPId.HasValue ?
                new ObjectParameter("STPId", sTPId) :
                new ObjectParameter("STPId", typeof(int));
    
            var preferredParameter = preferred.HasValue ?
                new ObjectParameter("Preferred", preferred) :
                new ObjectParameter("Preferred", typeof(bool));
    
            var line1Parameter = line1 != null ?
                new ObjectParameter("Line1", line1) :
                new ObjectParameter("Line1", typeof(string));
    
            var line2Parameter = line2 != null ?
                new ObjectParameter("Line2", line2) :
                new ObjectParameter("Line2", typeof(string));
    
            var line3Parameter = line3 != null ?
                new ObjectParameter("Line3", line3) :
                new ObjectParameter("Line3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var zipPlusParameter = zipPlus != null ?
                new ObjectParameter("ZipPlus", zipPlus) :
                new ObjectParameter("ZipPlus", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsAddress_Result>("uspInsAddress", gUIDParameter, personGUIDParameter, dealerIdParameter, typeIdParameter, sTPIdParameter, preferredParameter, line1Parameter, line2Parameter, line3Parameter, cityParameter, zipCodeParameter, zipPlusParameter, longitudeParameter, latitudeParameter, validParameter, enteredByParameter, enteredParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleById_Result> uspSelVehicleById(Nullable<System.Guid> gUID)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleById_Result>("uspSelVehicleById", gUIDParameter);
        }
    
        public virtual ObjectResult<uspSelServiceTypeEmails_Result> uspSelServiceTypeEmails(string serviceType, string packageId)
        {
            var serviceTypeParameter = serviceType != null ?
                new ObjectParameter("ServiceType", serviceType) :
                new ObjectParameter("ServiceType", typeof(string));
    
            var packageIdParameter = packageId != null ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelServiceTypeEmails_Result>("uspSelServiceTypeEmails", serviceTypeParameter, packageIdParameter);
        }
    
        public virtual ObjectResult<uspGetDealerDetails_Result> uspGetDealerDetails(string machineId)
        {
            var machineIdParameter = machineId != null ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDealerDetails_Result>("uspGetDealerDetails", machineIdParameter);
        }
    
        public virtual int uspUpSertEmailAddress(Nullable<System.Guid> emailGuid, string emailAddress, Nullable<System.Guid> updatedBy, Nullable<System.Guid> enteredBy, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleGuid, Nullable<byte> emailType)
        {
            var emailGuidParameter = emailGuid.HasValue ?
                new ObjectParameter("emailGuid", emailGuid) :
                new ObjectParameter("emailGuid", typeof(System.Guid));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(System.Guid));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("enteredBy", enteredBy) :
                new ObjectParameter("enteredBy", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("vehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("vehicleServiceGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("vehicleGuid", vehicleGuid) :
                new ObjectParameter("vehicleGuid", typeof(System.Guid));
    
            var emailTypeParameter = emailType.HasValue ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpSertEmailAddress", emailGuidParameter, emailAddressParameter, updatedByParameter, enteredByParameter, vehicleServiceGuidParameter, vehicleGuidParameter, emailTypeParameter);
        }
    
        public virtual int uspUpSertPhoneByPersonGuid(Nullable<System.Guid> phoneGuid, string phoneNumber, Nullable<System.Guid> updatedBy, Nullable<System.Guid> enteredBy, Nullable<System.Guid> personGuid, Nullable<byte> phoneType)
        {
            var phoneGuidParameter = phoneGuid.HasValue ?
                new ObjectParameter("phoneGuid", phoneGuid) :
                new ObjectParameter("phoneGuid", typeof(System.Guid));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(System.Guid));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("enteredBy", enteredBy) :
                new ObjectParameter("enteredBy", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("personGuid", personGuid) :
                new ObjectParameter("personGuid", typeof(System.Guid));
    
            var phoneTypeParameter = phoneType.HasValue ?
                new ObjectParameter("PhoneType", phoneType) :
                new ObjectParameter("PhoneType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpSertPhoneByPersonGuid", phoneGuidParameter, phoneNumberParameter, updatedByParameter, enteredByParameter, personGuidParameter, phoneTypeParameter);
        }
    
        public virtual int uspUpSertPhoneNumber(Nullable<System.Guid> phoneGuid, string phoneNumber, Nullable<System.Guid> updatedBy, Nullable<System.Guid> enteredBy, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleGuid, Nullable<byte> phoneType)
        {
            var phoneGuidParameter = phoneGuid.HasValue ?
                new ObjectParameter("phoneGuid", phoneGuid) :
                new ObjectParameter("phoneGuid", typeof(System.Guid));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(System.Guid));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("enteredBy", enteredBy) :
                new ObjectParameter("enteredBy", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("vehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("vehicleServiceGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("vehicleGuid", vehicleGuid) :
                new ObjectParameter("vehicleGuid", typeof(System.Guid));
    
            var phoneTypeParameter = phoneType.HasValue ?
                new ObjectParameter("PhoneType", phoneType) :
                new ObjectParameter("PhoneType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpSertPhoneNumber", phoneGuidParameter, phoneNumberParameter, updatedByParameter, enteredByParameter, vehicleServiceGuidParameter, vehicleGuidParameter, phoneTypeParameter);
        }
    
        public virtual ObjectResult<uspInsPersonName_Result> uspInsPersonName(Nullable<System.Guid> gUID, Nullable<System.Guid> personGUID, Nullable<byte> typeId, Nullable<byte> prefixId, Nullable<byte> suffixId, Nullable<bool> preferred, string first, string middle, string last, Nullable<bool> valid, Nullable<System.Guid> enteredBy, Nullable<System.DateTime> entered)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(byte));
    
            var prefixIdParameter = prefixId.HasValue ?
                new ObjectParameter("PrefixId", prefixId) :
                new ObjectParameter("PrefixId", typeof(byte));
    
            var suffixIdParameter = suffixId.HasValue ?
                new ObjectParameter("SuffixId", suffixId) :
                new ObjectParameter("SuffixId", typeof(byte));
    
            var preferredParameter = preferred.HasValue ?
                new ObjectParameter("Preferred", preferred) :
                new ObjectParameter("Preferred", typeof(bool));
    
            var firstParameter = first != null ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(string));
    
            var middleParameter = middle != null ?
                new ObjectParameter("Middle", middle) :
                new ObjectParameter("Middle", typeof(string));
    
            var lastParameter = last != null ?
                new ObjectParameter("Last", last) :
                new ObjectParameter("Last", typeof(string));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsPersonName_Result>("uspInsPersonName", gUIDParameter, personGUIDParameter, typeIdParameter, prefixIdParameter, suffixIdParameter, preferredParameter, firstParameter, middleParameter, lastParameter, validParameter, enteredByParameter, enteredParameter);
        }
    
        public virtual ObjectResult<uspSelPersonByLastFirstName_Result> uspSelPersonByLastFirstName(string lastName, string firstName)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonByLastFirstName_Result>("uspSelPersonByLastFirstName", lastNameParameter, firstNameParameter);
        }
    
        public virtual ObjectResult<uspInsErrorLog_Result> uspInsErrorLog(Nullable<System.DateTime> created, Nullable<byte> severityId, Nullable<long> exceptionId, string dBName, Nullable<int> number, Nullable<int> sourceLine, string sourceFile, string @class, string method, string @event, Nullable<int> state, Nullable<int> processId, string machineName, string userName, string targetSite, string stackTrace, string text)
        {
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            var severityIdParameter = severityId.HasValue ?
                new ObjectParameter("SeverityId", severityId) :
                new ObjectParameter("SeverityId", typeof(byte));
    
            var exceptionIdParameter = exceptionId.HasValue ?
                new ObjectParameter("ExceptionId", exceptionId) :
                new ObjectParameter("ExceptionId", typeof(long));
    
            var dBNameParameter = dBName != null ?
                new ObjectParameter("DBName", dBName) :
                new ObjectParameter("DBName", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var sourceLineParameter = sourceLine.HasValue ?
                new ObjectParameter("SourceLine", sourceLine) :
                new ObjectParameter("SourceLine", typeof(int));
    
            var sourceFileParameter = sourceFile != null ?
                new ObjectParameter("SourceFile", sourceFile) :
                new ObjectParameter("SourceFile", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("Event", @event) :
                new ObjectParameter("Event", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var targetSiteParameter = targetSite != null ?
                new ObjectParameter("TargetSite", targetSite) :
                new ObjectParameter("TargetSite", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsErrorLog_Result>("uspInsErrorLog", createdParameter, severityIdParameter, exceptionIdParameter, dBNameParameter, numberParameter, sourceLineParameter, sourceFileParameter, classParameter, methodParameter, eventParameter, stateParameter, processIdParameter, machineNameParameter, userNameParameter, targetSiteParameter, stackTraceParameter, textParameter);
        }
    
        public virtual ObjectResult<uspSelAllErrors_Result> uspSelAllErrors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelAllErrors_Result>("uspSelAllErrors");
        }
    
        public virtual ObjectResult<uspSelVehicleSvcsByDealerId_Result> uspSelVehicleSvcsByDealerId(Nullable<int> dealerId, Nullable<int> serviceStatusId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<short> pageNumber, Nullable<short> pageSize)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("ServiceStatusId", serviceStatusId) :
                new ObjectParameter("ServiceStatusId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleSvcsByDealerId_Result>("uspSelVehicleSvcsByDealerId", dealerIdParameter, serviceStatusIdParameter, startDateParameter, endDateParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<uspSelExpSvcsStatByDealerId_Result> uspSelExpSvcsStatByDealerId(Nullable<int> dealerId, Nullable<int> serviceStatusId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string lastName, Nullable<short> pageNumber, Nullable<short> pageSize)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("ServiceStatusId", serviceStatusId) :
                new ObjectParameter("ServiceStatusId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelExpSvcsStatByDealerId_Result>("uspSelExpSvcsStatByDealerId", dealerIdParameter, serviceStatusIdParameter, startDateParameter, endDateParameter, lastNameParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<uspSelPersonByGuid_Result> uspSelPersonByGuid(Nullable<System.Guid> personGuid)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonByGuid_Result>("uspSelPersonByGuid", personGuidParameter);
        }
    
        public virtual int uspUpSertEmailByPersonGuid(Nullable<System.Guid> emailGuid, string emailAddress, Nullable<System.Guid> updatedBy, Nullable<System.Guid> enteredBy, Nullable<System.Guid> personGuid, Nullable<byte> emailType)
        {
            var emailGuidParameter = emailGuid.HasValue ?
                new ObjectParameter("EmailGuid", emailGuid) :
                new ObjectParameter("EmailGuid", typeof(System.Guid));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(System.Guid));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("enteredBy", enteredBy) :
                new ObjectParameter("enteredBy", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("personGuid", personGuid) :
                new ObjectParameter("personGuid", typeof(System.Guid));
    
            var emailTypeParameter = emailType.HasValue ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpSertEmailByPersonGuid", emailGuidParameter, emailAddressParameter, updatedByParameter, enteredByParameter, personGuidParameter, emailTypeParameter);
        }
    
        public virtual ObjectResult<uspSelSvcTypeByPkgId_Result> uspSelSvcTypeByPkgId(Nullable<int> dealerId, Nullable<int> packageId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("packageId", packageId) :
                new ObjectParameter("packageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelSvcTypeByPkgId_Result>("uspSelSvcTypeByPkgId", dealerIdParameter, packageIdParameter);
        }
    
        public virtual ObjectResult<uspSelDealerDept_Result> uspSelDealerDept(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerDept_Result>("uspSelDealerDept", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspSelDealerPreTextMessage_Result> uspSelDealerPreTextMessage(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerPreTextMessage_Result>("uspSelDealerPreTextMessage", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspInsDealer_Result> uspInsDealer(Nullable<byte> dMSId, string name, string printerName, string description, string imageOsPath, string imageHttpPath, Nullable<bool> valid, Nullable<System.Guid> enteredBy, Nullable<System.DateTime> entered)
        {
            var dMSIdParameter = dMSId.HasValue ?
                new ObjectParameter("DMSId", dMSId) :
                new ObjectParameter("DMSId", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var printerNameParameter = printerName != null ?
                new ObjectParameter("PrinterName", printerName) :
                new ObjectParameter("PrinterName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageOsPathParameter = imageOsPath != null ?
                new ObjectParameter("ImageOsPath", imageOsPath) :
                new ObjectParameter("ImageOsPath", typeof(string));
    
            var imageHttpPathParameter = imageHttpPath != null ?
                new ObjectParameter("ImageHttpPath", imageHttpPath) :
                new ObjectParameter("ImageHttpPath", typeof(string));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsDealer_Result>("uspInsDealer", dMSIdParameter, nameParameter, printerNameParameter, descriptionParameter, imageOsPathParameter, imageHttpPathParameter, validParameter, enteredByParameter, enteredParameter);
        }
    
        public virtual int uspUpdateDeviceId(Nullable<System.Guid> personGuid, string deviceId, Nullable<byte> deviceTypeId)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("personGuid", personGuid) :
                new ObjectParameter("personGuid", typeof(System.Guid));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("deviceId", deviceId) :
                new ObjectParameter("deviceId", typeof(string));
    
            var deviceTypeIdParameter = deviceTypeId.HasValue ?
                new ObjectParameter("deviceTypeId", deviceTypeId) :
                new ObjectParameter("deviceTypeId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDeviceId", personGuidParameter, deviceIdParameter, deviceTypeIdParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleSvcsByPersonId_Result> uspSelVehicleSvcsByPersonId(Nullable<int> dealerId, Nullable<System.Guid> personGUID, Nullable<System.DateTime> serviceDate, string lastName, Nullable<int> serviceStatusId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("serviceDate", serviceDate) :
                new ObjectParameter("serviceDate", typeof(System.DateTime));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("serviceStatusId", serviceStatusId) :
                new ObjectParameter("serviceStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleSvcsByPersonId_Result>("uspSelVehicleSvcsByPersonId", dealerIdParameter, personGUIDParameter, serviceDateParameter, lastNameParameter, serviceStatusIdParameter);
        }
    
        public virtual ObjectResult<uspSelDealerEmpPages_Result> uspSelDealerEmpPages(Nullable<int> dealerId, Nullable<System.Guid> dealerEmpGuid)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerEmpPages_Result>("uspSelDealerEmpPages", dealerIdParameter, dealerEmpGuidParameter);
        }
    
        public virtual ObjectResult<uspSelLookUpTableByDealerId_Result> uspSelLookUpTableByDealerId(string tableName, Nullable<int> dealerId)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelLookUpTableByDealerId_Result>("uspSelLookUpTableByDealerId", tableNameParameter, dealerIdParameter);
        }
    
        public virtual ObjectResult<uspSelKeyLockerOpenPeg_Result> uspSelKeyLockerOpenPeg(Nullable<int> dealerId, Nullable<int> keyLockerId, string deviceIdentifier)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var keyLockerIdParameter = keyLockerId.HasValue ?
                new ObjectParameter("KeyLockerId", keyLockerId) :
                new ObjectParameter("KeyLockerId", typeof(int));
    
            var deviceIdentifierParameter = deviceIdentifier != null ?
                new ObjectParameter("deviceIdentifier", deviceIdentifier) :
                new ObjectParameter("deviceIdentifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelKeyLockerOpenPeg_Result>("uspSelKeyLockerOpenPeg", dealerIdParameter, keyLockerIdParameter, deviceIdentifierParameter);
        }
    
        public virtual int uspUpsertPreTextMessage(Nullable<int> dealerId, Nullable<byte> deptId, Nullable<int> messageId, string textMsg, Nullable<bool> isDelete)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(byte));
    
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var textMsgParameter = textMsg != null ?
                new ObjectParameter("TextMsg", textMsg) :
                new ObjectParameter("TextMsg", typeof(string));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertPreTextMessage", dealerIdParameter, deptIdParameter, messageIdParameter, textMsgParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<uspLoginDealerEmployee_Result> uspLoginDealerEmployee(Nullable<int> dealerId, string userName, string password)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoginDealerEmployee_Result>("uspLoginDealerEmployee", dealerIdParameter, userNameParameter, passwordParameter);
        }
    
        public virtual int uspDelVehicleServiceImage(Nullable<int> dealerId, Nullable<System.Guid> imageDeletedBy, Nullable<long> imageId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var imageDeletedByParameter = imageDeletedBy.HasValue ?
                new ObjectParameter("ImageDeletedBy", imageDeletedBy) :
                new ObjectParameter("ImageDeletedBy", typeof(System.Guid));
    
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("ImageId", imageId) :
                new ObjectParameter("ImageId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDelVehicleServiceImage", dealerIdParameter, imageDeletedByParameter, imageIdParameter);
        }
    
        public virtual ObjectResult<uspSelVehSvcsForARCH_Result> uspSelVehSvcsForARCH(Nullable<int> dealerId, Nullable<System.DateTime> serviceDateFrom, Nullable<System.DateTime> serviceDateTo, string lastName, Nullable<int> serviceStatusId, Nullable<bool> showInServiceCustomer)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var serviceDateFromParameter = serviceDateFrom.HasValue ?
                new ObjectParameter("serviceDateFrom", serviceDateFrom) :
                new ObjectParameter("serviceDateFrom", typeof(System.DateTime));
    
            var serviceDateToParameter = serviceDateTo.HasValue ?
                new ObjectParameter("serviceDateTo", serviceDateTo) :
                new ObjectParameter("serviceDateTo", typeof(System.DateTime));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("serviceStatusId", serviceStatusId) :
                new ObjectParameter("serviceStatusId", typeof(int));
    
            var showInServiceCustomerParameter = showInServiceCustomer.HasValue ?
                new ObjectParameter("showInServiceCustomer", showInServiceCustomer) :
                new ObjectParameter("showInServiceCustomer", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehSvcsForARCH_Result>("uspSelVehSvcsForARCH", dealerIdParameter, serviceDateFromParameter, serviceDateToParameter, lastNameParameter, serviceStatusIdParameter, showInServiceCustomerParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServiceImage_Result> uspSelVehicleServiceImage(Nullable<int> dealerId, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> imageUploadedBy, Nullable<long> imageId, Nullable<bool> isExcludeImages)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var imageUploadedByParameter = imageUploadedBy.HasValue ?
                new ObjectParameter("ImageUploadedBy", imageUploadedBy) :
                new ObjectParameter("ImageUploadedBy", typeof(System.Guid));
    
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("ImageId", imageId) :
                new ObjectParameter("ImageId", typeof(long));
    
            var isExcludeImagesParameter = isExcludeImages.HasValue ?
                new ObjectParameter("IsExcludeImages", isExcludeImages) :
                new ObjectParameter("IsExcludeImages", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServiceImage_Result>("uspSelVehicleServiceImage", dealerIdParameter, vehicleGuidParameter, vehicleServiceGuidParameter, imageUploadedByParameter, imageIdParameter, isExcludeImagesParameter);
        }
    
        public virtual int uspInsVehicleServiceImage(Nullable<long> imageId, Nullable<int> dealerId, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> imageUploadedBy, byte[] vehImage, string comments)
        {
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("ImageId", imageId) :
                new ObjectParameter("ImageId", typeof(long));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var imageUploadedByParameter = imageUploadedBy.HasValue ?
                new ObjectParameter("ImageUploadedBy", imageUploadedBy) :
                new ObjectParameter("ImageUploadedBy", typeof(System.Guid));
    
            var vehImageParameter = vehImage != null ?
                new ObjectParameter("VehImage", vehImage) :
                new ObjectParameter("VehImage", typeof(byte[]));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsVehicleServiceImage", imageIdParameter, dealerIdParameter, vehicleGuidParameter, vehicleServiceGuidParameter, imageUploadedByParameter, vehImageParameter, commentsParameter);
        }
    
        public virtual ObjectResult<uspInsVehicle_Result> uspInsVehicle(Nullable<System.Guid> gUID, Nullable<System.Guid> personGUID, Nullable<int> dealerId, Nullable<int> makeId, Nullable<int> modelId, Nullable<int> trimId, Nullable<short> year, Nullable<short> colorId, string name, Nullable<int> mileage, Nullable<int> lastServiceMileage, Nullable<int> yearlyAverageMileage, string color, string licenseNumber, Nullable<int> ePD, string vIN, Nullable<bool> valid, Nullable<System.Guid> enteredBy, Nullable<System.DateTime> entered, string vehicleName)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var trimIdParameter = trimId.HasValue ?
                new ObjectParameter("TrimId", trimId) :
                new ObjectParameter("TrimId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var lastServiceMileageParameter = lastServiceMileage.HasValue ?
                new ObjectParameter("LastServiceMileage", lastServiceMileage) :
                new ObjectParameter("LastServiceMileage", typeof(int));
    
            var yearlyAverageMileageParameter = yearlyAverageMileage.HasValue ?
                new ObjectParameter("YearlyAverageMileage", yearlyAverageMileage) :
                new ObjectParameter("YearlyAverageMileage", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var ePDParameter = ePD.HasValue ?
                new ObjectParameter("EPD", ePD) :
                new ObjectParameter("EPD", typeof(int));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("Entered", entered) :
                new ObjectParameter("Entered", typeof(System.DateTime));
    
            var vehicleNameParameter = vehicleName != null ?
                new ObjectParameter("VehicleName", vehicleName) :
                new ObjectParameter("VehicleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsVehicle_Result>("uspInsVehicle", gUIDParameter, personGUIDParameter, dealerIdParameter, makeIdParameter, modelIdParameter, trimIdParameter, yearParameter, colorIdParameter, nameParameter, mileageParameter, lastServiceMileageParameter, yearlyAverageMileageParameter, colorParameter, licenseNumberParameter, ePDParameter, vINParameter, validParameter, enteredByParameter, enteredParameter, vehicleNameParameter);
        }
    
        public virtual ObjectResult<uspRegisterCustomer_Result> uspRegisterCustomer(Nullable<int> dealerId, Nullable<int> dealerFamilyId, string firstName, string middleName, string lastName, string email, string phone, string addressLine1, string addressLine2, string addressLine3, string city, string state, string zip, string plate, string vIN, Nullable<int> makeId, Nullable<int> modelId, Nullable<int> trimId, Nullable<short> year, Nullable<int> currentMileage, Nullable<int> yearlyMiles, string vehicleName)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var plateParameter = plate != null ?
                new ObjectParameter("Plate", plate) :
                new ObjectParameter("Plate", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var trimIdParameter = trimId.HasValue ?
                new ObjectParameter("TrimId", trimId) :
                new ObjectParameter("TrimId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var currentMileageParameter = currentMileage.HasValue ?
                new ObjectParameter("CurrentMileage", currentMileage) :
                new ObjectParameter("CurrentMileage", typeof(int));
    
            var yearlyMilesParameter = yearlyMiles.HasValue ?
                new ObjectParameter("YearlyMiles", yearlyMiles) :
                new ObjectParameter("YearlyMiles", typeof(int));
    
            var vehicleNameParameter = vehicleName != null ?
                new ObjectParameter("VehicleName", vehicleName) :
                new ObjectParameter("VehicleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRegisterCustomer_Result>("uspRegisterCustomer", dealerIdParameter, dealerFamilyIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, emailParameter, phoneParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, stateParameter, zipParameter, plateParameter, vINParameter, makeIdParameter, modelIdParameter, trimIdParameter, yearParameter, currentMileageParameter, yearlyMilesParameter, vehicleNameParameter);
        }
    
        public virtual ObjectResult<uspSelCustomer_Result> uspSelCustomer(string firstName, string lastName, string vIN, Nullable<int> dealerId, Nullable<short> dealerFamilyId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelCustomer_Result>("uspSelCustomer", firstNameParameter, lastNameParameter, vINParameter, dealerIdParameter, dealerFamilyIdParameter);
        }
    
        public virtual ObjectResult<uspSelDealerMsg_Result> uspSelDealerMsg(Nullable<int> dealerId, Nullable<System.Guid> dealerEmpGuid, Nullable<System.DateTime> msgDt, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> personGuid)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var msgDtParameter = msgDt.HasValue ?
                new ObjectParameter("MsgDt", msgDt) :
                new ObjectParameter("MsgDt", typeof(System.DateTime));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerMsg_Result>("uspSelDealerMsg", dealerIdParameter, dealerEmpGuidParameter, msgDtParameter, vehicleServiceGuidParameter, personGuidParameter);
        }
    
        public virtual ObjectResult<uspSelDealerFamilyById_Result> uspSelDealerFamilyById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerFamilyById_Result>("uspSelDealerFamilyById", idParameter);
        }
    
        public virtual ObjectResult<uspSelDealerByFamilyId_Result> uspSelDealerByFamilyId(Nullable<int> dealerFamilyId)
        {
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("dealerFamilyId", dealerFamilyId) :
                new ObjectParameter("dealerFamilyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerByFamilyId_Result>("uspSelDealerByFamilyId", dealerFamilyIdParameter);
        }
    
        public virtual ObjectResult<uspSelChatMessage_Result> uspSelChatMessage(string lastName, string firstName, string vIN, Nullable<int> dealerId, Nullable<System.Guid> personGuid)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelChatMessage_Result>("uspSelChatMessage", lastNameParameter, firstNameParameter, vINParameter, dealerIdParameter, personGuidParameter);
        }
    
        public virtual ObjectResult<uspSelDealerMsgHist_Result> uspSelDealerMsgHist(Nullable<int> dealerId, Nullable<System.Guid> dealerEmpGuid, Nullable<System.DateTime> msgDtFrom, Nullable<System.DateTime> msgDtTo, Nullable<System.Guid> vehicleServiceGuid, string fromPhNum, string toPhNum, string msgFrom, string msgTo, Nullable<short> pageStartIndex, Nullable<short> pageSize)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var msgDtFromParameter = msgDtFrom.HasValue ?
                new ObjectParameter("MsgDtFrom", msgDtFrom) :
                new ObjectParameter("MsgDtFrom", typeof(System.DateTime));
    
            var msgDtToParameter = msgDtTo.HasValue ?
                new ObjectParameter("MsgDtTo", msgDtTo) :
                new ObjectParameter("MsgDtTo", typeof(System.DateTime));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var fromPhNumParameter = fromPhNum != null ?
                new ObjectParameter("FromPhNum", fromPhNum) :
                new ObjectParameter("FromPhNum", typeof(string));
    
            var toPhNumParameter = toPhNum != null ?
                new ObjectParameter("ToPhNum", toPhNum) :
                new ObjectParameter("ToPhNum", typeof(string));
    
            var msgFromParameter = msgFrom != null ?
                new ObjectParameter("MsgFrom", msgFrom) :
                new ObjectParameter("MsgFrom", typeof(string));
    
            var msgToParameter = msgTo != null ?
                new ObjectParameter("MsgTo", msgTo) :
                new ObjectParameter("MsgTo", typeof(string));
    
            var pageStartIndexParameter = pageStartIndex.HasValue ?
                new ObjectParameter("PageStartIndex", pageStartIndex) :
                new ObjectParameter("PageStartIndex", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerMsgHist_Result>("uspSelDealerMsgHist", dealerIdParameter, dealerEmpGuidParameter, msgDtFromParameter, msgDtToParameter, vehicleServiceGuidParameter, fromPhNumParameter, toPhNumParameter, msgFromParameter, msgToParameter, pageStartIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<uspSelVehSvcsWebARCH_Result> uspSelVehSvcsWebARCH(Nullable<int> dealerId, Nullable<System.DateTime> serviceDateFrom, Nullable<System.DateTime> serviceDateTo, string lastName, Nullable<int> serviceStatusId, Nullable<bool> showInServiceCustomer, Nullable<short> pageNumber, Nullable<short> pageSize)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var serviceDateFromParameter = serviceDateFrom.HasValue ?
                new ObjectParameter("serviceDateFrom", serviceDateFrom) :
                new ObjectParameter("serviceDateFrom", typeof(System.DateTime));
    
            var serviceDateToParameter = serviceDateTo.HasValue ?
                new ObjectParameter("serviceDateTo", serviceDateTo) :
                new ObjectParameter("serviceDateTo", typeof(System.DateTime));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("serviceStatusId", serviceStatusId) :
                new ObjectParameter("serviceStatusId", typeof(int));
    
            var showInServiceCustomerParameter = showInServiceCustomer.HasValue ?
                new ObjectParameter("showInServiceCustomer", showInServiceCustomer) :
                new ObjectParameter("showInServiceCustomer", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehSvcsWebARCH_Result>("uspSelVehSvcsWebARCH", dealerIdParameter, serviceDateFromParameter, serviceDateToParameter, lastNameParameter, serviceStatusIdParameter, showInServiceCustomerParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<uspSelCustomerLite_Result> uspSelCustomerLite(Nullable<int> dealerId, string lastName, string firstName, string phoneNumber, Nullable<short> pageStartIndex, Nullable<short> pageSize)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var pageStartIndexParameter = pageStartIndex.HasValue ?
                new ObjectParameter("PageStartIndex", pageStartIndex) :
                new ObjectParameter("PageStartIndex", typeof(short));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelCustomerLite_Result>("uspSelCustomerLite", dealerIdParameter, lastNameParameter, firstNameParameter, phoneNumberParameter, pageStartIndexParameter, pageSizeParameter);
        }
    
        public virtual int uspInsDealerMsg(Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> dealerEmpGuid, Nullable<System.Guid> personGuid, Nullable<int> dealerId, string msgFrom, string msgTo, string txtMsg, Nullable<bool> isCustMsg, Nullable<bool> isMsgToCust)
        {
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var msgFromParameter = msgFrom != null ?
                new ObjectParameter("MsgFrom", msgFrom) :
                new ObjectParameter("MsgFrom", typeof(string));
    
            var msgToParameter = msgTo != null ?
                new ObjectParameter("MsgTo", msgTo) :
                new ObjectParameter("MsgTo", typeof(string));
    
            var txtMsgParameter = txtMsg != null ?
                new ObjectParameter("TxtMsg", txtMsg) :
                new ObjectParameter("TxtMsg", typeof(string));
    
            var isCustMsgParameter = isCustMsg.HasValue ?
                new ObjectParameter("IsCustMsg", isCustMsg) :
                new ObjectParameter("IsCustMsg", typeof(bool));
    
            var isMsgToCustParameter = isMsgToCust.HasValue ?
                new ObjectParameter("IsMsgToCust", isMsgToCust) :
                new ObjectParameter("IsMsgToCust", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsDealerMsg", vehicleServiceGuidParameter, vehicleGuidParameter, dealerEmpGuidParameter, personGuidParameter, dealerIdParameter, msgFromParameter, msgToParameter, txtMsgParameter, isCustMsgParameter, isMsgToCustParameter);
        }
    
        public virtual ObjectResult<uspSelDealerDetailsById_Result> uspSelDealerDetailsById(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerDetailsById_Result>("uspSelDealerDetailsById", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspLoginDealerEmployeeByEmail_Result> uspLoginDealerEmployeeByEmail(string userEmail, string password)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoginDealerEmployeeByEmail_Result>("uspLoginDealerEmployeeByEmail", userEmailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelMPICountByServiceGuid(Nullable<System.Guid> vehicleServiceGuid)
        {
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelMPICountByServiceGuid", vehicleServiceGuidParameter);
        }
    
        public virtual ObjectResult<uspRegisterCustomerLite_Result> uspRegisterCustomerLite(Nullable<int> dealerId, Nullable<int> dealerFamilyId, string firstName, string middleName, string lastName, string email, string phone, string addressLine1, string addressLine2, string addressLine3, string city, string state, string zip, string vehicleYrMkMod)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var vehicleYrMkModParameter = vehicleYrMkMod != null ?
                new ObjectParameter("VehicleYrMkMod", vehicleYrMkMod) :
                new ObjectParameter("VehicleYrMkMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRegisterCustomerLite_Result>("uspRegisterCustomerLite", dealerIdParameter, dealerFamilyIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, emailParameter, phoneParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, stateParameter, zipParameter, vehicleYrMkModParameter);
        }
    
        public virtual ObjectResult<uspSelDealerKiosks_Result> uspSelDealerKiosks(Nullable<bool> validOnly, Nullable<int> id)
        {
            var validOnlyParameter = validOnly.HasValue ?
                new ObjectParameter("ValidOnly", validOnly) :
                new ObjectParameter("ValidOnly", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerKiosks_Result>("uspSelDealerKiosks", validOnlyParameter, idParameter);
        }
    
        public virtual int uspUpdateKioskResetPassword(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateKioskResetPassword", idParameter);
        }
    
        public virtual int uspInsChatMessage(Nullable<int> alertId, string lastName, string firstName, string vIN, string text, Nullable<int> dealerId, Nullable<System.Guid> personGuid, Nullable<System.Guid> dealerEmpGuid, ObjectParameter outMessage)
        {
            var alertIdParameter = alertId.HasValue ?
                new ObjectParameter("AlertId", alertId) :
                new ObjectParameter("AlertId", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsChatMessage", alertIdParameter, lastNameParameter, firstNameParameter, vINParameter, textParameter, dealerIdParameter, personGuidParameter, dealerEmpGuidParameter, outMessage);
        }
    
        public virtual ObjectResult<uspSelAllMPIGroups_Result> uspSelAllMPIGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelAllMPIGroups_Result>("uspSelAllMPIGroups");
        }
    
        public virtual ObjectResult<uspSelAllMPIItems_Result> uspSelAllMPIItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelAllMPIItems_Result>("uspSelAllMPIItems");
        }
    
        public virtual int uspUpsertDealerMPIGroupItems(Nullable<int> dealerId, Nullable<int> mPIGroupPosition, Nullable<int> mPIGroupId, Nullable<int> mPIItemId, Nullable<bool> isValid, Nullable<int> sortOrder)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var mPIGroupPositionParameter = mPIGroupPosition.HasValue ?
                new ObjectParameter("MPIGroupPosition", mPIGroupPosition) :
                new ObjectParameter("MPIGroupPosition", typeof(int));
    
            var mPIGroupIdParameter = mPIGroupId.HasValue ?
                new ObjectParameter("MPIGroupId", mPIGroupId) :
                new ObjectParameter("MPIGroupId", typeof(int));
    
            var mPIItemIdParameter = mPIItemId.HasValue ?
                new ObjectParameter("MPIItemId", mPIItemId) :
                new ObjectParameter("MPIItemId", typeof(int));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertDealerMPIGroupItems", dealerIdParameter, mPIGroupPositionParameter, mPIGroupIdParameter, mPIItemIdParameter, isValidParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<uspSelAdminMPIListByDealerId_Result> uspSelAdminMPIListByDealerId(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelAdminMPIListByDealerId_Result>("uspSelAdminMPIListByDealerId", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspSelDealerEmployees_Result> uspSelDealerEmployees(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerEmployees_Result>("uspSelDealerEmployees", dealerIdParameter);
        }
    
        public virtual int uspUpsertDealerKiosk(Nullable<int> kioskId, Nullable<int> dealerid, string machineId, Nullable<int> oSTypeId, string name, Nullable<bool> isValid, Nullable<bool> reSetPassword)
        {
            var kioskIdParameter = kioskId.HasValue ?
                new ObjectParameter("KioskId", kioskId) :
                new ObjectParameter("KioskId", typeof(int));
    
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var machineIdParameter = machineId != null ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(string));
    
            var oSTypeIdParameter = oSTypeId.HasValue ?
                new ObjectParameter("OSTypeId", oSTypeId) :
                new ObjectParameter("OSTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            var reSetPasswordParameter = reSetPassword.HasValue ?
                new ObjectParameter("ReSetPassword", reSetPassword) :
                new ObjectParameter("ReSetPassword", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertDealerKiosk", kioskIdParameter, dealeridParameter, machineIdParameter, oSTypeIdParameter, nameParameter, isValidParameter, reSetPasswordParameter);
        }
    
        public virtual int uspUpdateDealerMsg(Nullable<int> dealerid, Nullable<int> msgId, Nullable<System.Guid> readBy)
        {
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var msgIdParameter = msgId.HasValue ?
                new ObjectParameter("MsgId", msgId) :
                new ObjectParameter("MsgId", typeof(int));
    
            var readByParameter = readBy.HasValue ?
                new ObjectParameter("ReadBy", readBy) :
                new ObjectParameter("ReadBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDealerMsg", dealeridParameter, msgIdParameter, readByParameter);
        }
    
        public virtual ObjectResult<uspSelMPIListByDealerId_Result> uspSelMPIListByDealerId(Nullable<int> dealerId, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> personGuid)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelMPIListByDealerId_Result>("uspSelMPIListByDealerId", dealerIdParameter, vehicleServiceGuidParameter, personGuidParameter);
        }
    
        public virtual ObjectResult<uspSelPersonGroup_Result> uspSelPersonGroup(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelPersonGroup_Result>("uspSelPersonGroup", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspSelDealerMessage_Result> uspSelDealerMessage(Nullable<int> dealerId, Nullable<System.Guid> dealerEmpGuid, Nullable<System.DateTime> msgDt, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> personGuid, string fromPhNum, string toPhNum)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var msgDtParameter = msgDt.HasValue ?
                new ObjectParameter("MsgDt", msgDt) :
                new ObjectParameter("MsgDt", typeof(System.DateTime));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var fromPhNumParameter = fromPhNum != null ?
                new ObjectParameter("FromPhNum", fromPhNum) :
                new ObjectParameter("FromPhNum", typeof(string));
    
            var toPhNumParameter = toPhNum != null ?
                new ObjectParameter("ToPhNum", toPhNum) :
                new ObjectParameter("ToPhNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerMessage_Result>("uspSelDealerMessage", dealerIdParameter, dealerEmpGuidParameter, msgDtParameter, vehicleServiceGuidParameter, personGuidParameter, fromPhNumParameter, toPhNumParameter);
        }
    
        public virtual int uspUpdateDealerMsgBell(Nullable<int> dealerid, Nullable<int> msgId, Nullable<System.Guid> readBy)
        {
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var msgIdParameter = msgId.HasValue ?
                new ObjectParameter("MsgId", msgId) :
                new ObjectParameter("MsgId", typeof(int));
    
            var readByParameter = readBy.HasValue ?
                new ObjectParameter("ReadBy", readBy) :
                new ObjectParameter("ReadBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDealerMsgBell", dealeridParameter, msgIdParameter, readByParameter);
        }
    
        public virtual ObjectResult<uspSelDealerEmpPagesAdmin_Result> uspSelDealerEmpPagesAdmin(Nullable<int> dealerId, Nullable<System.Guid> dealerEmpGuid)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelDealerEmpPagesAdmin_Result>("uspSelDealerEmpPagesAdmin", dealerIdParameter, dealerEmpGuidParameter);
        }
    
        public virtual int uspUpdateEmpPagesAdmin(Nullable<int> dealerId, Nullable<System.Guid> dealerEmpGuid, Nullable<int> pageId, Nullable<bool> isEnabled)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var pageIdParameter = pageId.HasValue ?
                new ObjectParameter("PageId", pageId) :
                new ObjectParameter("PageId", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmpPagesAdmin", dealerIdParameter, dealerEmpGuidParameter, pageIdParameter, isEnabledParameter);
        }
    
        public virtual int uspUpsertDealerContacts(Nullable<int> dealerid, string dealerName, string description, string imageOSPath, string imageHttpPath, string serviceEmailFromId, string serviceEmailFromName, string serviceEmailSubject, string emailAddress, string webURL, string address1, string address2, string city, string state, string zipCode, string salesPhone, string servicePhone, string generalInquryPhone, string managerName, string managerPhone, Nullable<bool> isValid)
        {
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var dealerNameParameter = dealerName != null ?
                new ObjectParameter("DealerName", dealerName) :
                new ObjectParameter("DealerName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageOSPathParameter = imageOSPath != null ?
                new ObjectParameter("ImageOSPath", imageOSPath) :
                new ObjectParameter("ImageOSPath", typeof(string));
    
            var imageHttpPathParameter = imageHttpPath != null ?
                new ObjectParameter("ImageHttpPath", imageHttpPath) :
                new ObjectParameter("ImageHttpPath", typeof(string));
    
            var serviceEmailFromIdParameter = serviceEmailFromId != null ?
                new ObjectParameter("ServiceEmailFromId", serviceEmailFromId) :
                new ObjectParameter("ServiceEmailFromId", typeof(string));
    
            var serviceEmailFromNameParameter = serviceEmailFromName != null ?
                new ObjectParameter("ServiceEmailFromName", serviceEmailFromName) :
                new ObjectParameter("ServiceEmailFromName", typeof(string));
    
            var serviceEmailSubjectParameter = serviceEmailSubject != null ?
                new ObjectParameter("ServiceEmailSubject", serviceEmailSubject) :
                new ObjectParameter("ServiceEmailSubject", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var webURLParameter = webURL != null ?
                new ObjectParameter("WebURL", webURL) :
                new ObjectParameter("WebURL", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var salesPhoneParameter = salesPhone != null ?
                new ObjectParameter("SalesPhone", salesPhone) :
                new ObjectParameter("SalesPhone", typeof(string));
    
            var servicePhoneParameter = servicePhone != null ?
                new ObjectParameter("ServicePhone", servicePhone) :
                new ObjectParameter("ServicePhone", typeof(string));
    
            var generalInquryPhoneParameter = generalInquryPhone != null ?
                new ObjectParameter("GeneralInquryPhone", generalInquryPhone) :
                new ObjectParameter("GeneralInquryPhone", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var managerPhoneParameter = managerPhone != null ?
                new ObjectParameter("ManagerPhone", managerPhone) :
                new ObjectParameter("ManagerPhone", typeof(string));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertDealerContacts", dealeridParameter, dealerNameParameter, descriptionParameter, imageOSPathParameter, imageHttpPathParameter, serviceEmailFromIdParameter, serviceEmailFromNameParameter, serviceEmailSubjectParameter, emailAddressParameter, webURLParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipCodeParameter, salesPhoneParameter, servicePhoneParameter, generalInquryPhoneParameter, managerNameParameter, managerPhoneParameter, isValidParameter);
        }
    
        public virtual int uspUpsertDealerEmployee(Nullable<int> dealerid, Nullable<System.Guid> dealerEmpGuid, string loginName, string name, string emailAddress, string phoneNumber, Nullable<int> deptId, string password, Nullable<bool> isValid, Nullable<int> siteRole, Nullable<bool> isEnableDoorBell, string googleGuid, Nullable<int> deviceTypeId, string inspectionLicExpDate, string emisisonLicExpDate, string operatorLicExpDate, string mechanicLicExpDate, string licClass, string licNum, string emissionLicNum, string emissionLicClass, string dLNum, string dLState, string dLClass, string dLExpDate)
        {
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("loginName", loginName) :
                new ObjectParameter("loginName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("isValid", isValid) :
                new ObjectParameter("isValid", typeof(bool));
    
            var siteRoleParameter = siteRole.HasValue ?
                new ObjectParameter("siteRole", siteRole) :
                new ObjectParameter("siteRole", typeof(int));
    
            var isEnableDoorBellParameter = isEnableDoorBell.HasValue ?
                new ObjectParameter("IsEnableDoorBell", isEnableDoorBell) :
                new ObjectParameter("IsEnableDoorBell", typeof(bool));
    
            var googleGuidParameter = googleGuid != null ?
                new ObjectParameter("GoogleGuid", googleGuid) :
                new ObjectParameter("GoogleGuid", typeof(string));
    
            var deviceTypeIdParameter = deviceTypeId.HasValue ?
                new ObjectParameter("DeviceTypeId", deviceTypeId) :
                new ObjectParameter("DeviceTypeId", typeof(int));
    
            var inspectionLicExpDateParameter = inspectionLicExpDate != null ?
                new ObjectParameter("InspectionLicExpDate", inspectionLicExpDate) :
                new ObjectParameter("InspectionLicExpDate", typeof(string));
    
            var emisisonLicExpDateParameter = emisisonLicExpDate != null ?
                new ObjectParameter("EmisisonLicExpDate", emisisonLicExpDate) :
                new ObjectParameter("EmisisonLicExpDate", typeof(string));
    
            var operatorLicExpDateParameter = operatorLicExpDate != null ?
                new ObjectParameter("OperatorLicExpDate", operatorLicExpDate) :
                new ObjectParameter("OperatorLicExpDate", typeof(string));
    
            var mechanicLicExpDateParameter = mechanicLicExpDate != null ?
                new ObjectParameter("MechanicLicExpDate", mechanicLicExpDate) :
                new ObjectParameter("MechanicLicExpDate", typeof(string));
    
            var licClassParameter = licClass != null ?
                new ObjectParameter("LicClass", licClass) :
                new ObjectParameter("LicClass", typeof(string));
    
            var licNumParameter = licNum != null ?
                new ObjectParameter("LicNum", licNum) :
                new ObjectParameter("LicNum", typeof(string));
    
            var emissionLicNumParameter = emissionLicNum != null ?
                new ObjectParameter("EmissionLicNum", emissionLicNum) :
                new ObjectParameter("EmissionLicNum", typeof(string));
    
            var emissionLicClassParameter = emissionLicClass != null ?
                new ObjectParameter("EmissionLicClass", emissionLicClass) :
                new ObjectParameter("EmissionLicClass", typeof(string));
    
            var dLNumParameter = dLNum != null ?
                new ObjectParameter("DLNum", dLNum) :
                new ObjectParameter("DLNum", typeof(string));
    
            var dLStateParameter = dLState != null ?
                new ObjectParameter("DLState", dLState) :
                new ObjectParameter("DLState", typeof(string));
    
            var dLClassParameter = dLClass != null ?
                new ObjectParameter("DLClass", dLClass) :
                new ObjectParameter("DLClass", typeof(string));
    
            var dLExpDateParameter = dLExpDate != null ?
                new ObjectParameter("DLExpDate", dLExpDate) :
                new ObjectParameter("DLExpDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertDealerEmployee", dealeridParameter, dealerEmpGuidParameter, loginNameParameter, nameParameter, emailAddressParameter, phoneNumberParameter, deptIdParameter, passwordParameter, isValidParameter, siteRoleParameter, isEnableDoorBellParameter, googleGuidParameter, deviceTypeIdParameter, inspectionLicExpDateParameter, emisisonLicExpDateParameter, operatorLicExpDateParameter, mechanicLicExpDateParameter, licClassParameter, licNumParameter, emissionLicNumParameter, emissionLicClassParameter, dLNumParameter, dLStateParameter, dLClassParameter, dLExpDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> uspUpdateCustomerLite(Nullable<int> dealerId, Nullable<System.Guid> personGUID, string firstName, string middleName, string lastName, string email, string phone, string addressLine1, string addressLine2, string city, string state, string zip, string vehicleYrMkMod)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var vehicleYrMkModParameter = vehicleYrMkMod != null ?
                new ObjectParameter("VehicleYrMkMod", vehicleYrMkMod) :
                new ObjectParameter("VehicleYrMkMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("uspUpdateCustomerLite", dealerIdParameter, personGUIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, emailParameter, phoneParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateParameter, zipParameter, vehicleYrMkModParameter);
        }
    
        public virtual ObjectResult<uspUpdAddress_Result> uspUpdAddress(Nullable<System.Guid> gUID, Nullable<System.Guid> personGUID, Nullable<int> dealerId, Nullable<byte> typeId, Nullable<int> sTPId, Nullable<bool> preferred, string line1, string line2, string line3, string city, string zipCode, string zipPlus, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<bool> valid, Nullable<System.Guid> updatedBy, Nullable<System.DateTime> updated)
        {
            var gUIDParameter = gUID.HasValue ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(System.Guid));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(byte));
    
            var sTPIdParameter = sTPId.HasValue ?
                new ObjectParameter("STPId", sTPId) :
                new ObjectParameter("STPId", typeof(int));
    
            var preferredParameter = preferred.HasValue ?
                new ObjectParameter("Preferred", preferred) :
                new ObjectParameter("Preferred", typeof(bool));
    
            var line1Parameter = line1 != null ?
                new ObjectParameter("Line1", line1) :
                new ObjectParameter("Line1", typeof(string));
    
            var line2Parameter = line2 != null ?
                new ObjectParameter("Line2", line2) :
                new ObjectParameter("Line2", typeof(string));
    
            var line3Parameter = line3 != null ?
                new ObjectParameter("Line3", line3) :
                new ObjectParameter("Line3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var zipPlusParameter = zipPlus != null ?
                new ObjectParameter("ZipPlus", zipPlus) :
                new ObjectParameter("ZipPlus", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdAddress_Result>("uspUpdAddress", gUIDParameter, personGUIDParameter, dealerIdParameter, typeIdParameter, sTPIdParameter, preferredParameter, line1Parameter, line2Parameter, line3Parameter, cityParameter, zipCodeParameter, zipPlusParameter, longitudeParameter, latitudeParameter, validParameter, updatedByParameter, updatedParameter);
        }
    
        public virtual ObjectResult<uspSelMPIImages_Result> uspSelMPIImages(Nullable<int> dealerid, Nullable<System.Guid> personGuid)
        {
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelMPIImages_Result>("uspSelMPIImages", dealeridParameter, personGuidParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> uspUpSertMPIImages(Nullable<long> id, Nullable<int> dealerid, Nullable<System.Guid> dealerEmpGuid, Nullable<System.Guid> personGuid, string imgLnk1, string imgLnk2, string imgLnk3, string imgLnk4)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var dealeridParameter = dealerid.HasValue ?
                new ObjectParameter("dealerid", dealerid) :
                new ObjectParameter("dealerid", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var imgLnk1Parameter = imgLnk1 != null ?
                new ObjectParameter("ImgLnk1", imgLnk1) :
                new ObjectParameter("ImgLnk1", typeof(string));
    
            var imgLnk2Parameter = imgLnk2 != null ?
                new ObjectParameter("ImgLnk2", imgLnk2) :
                new ObjectParameter("ImgLnk2", typeof(string));
    
            var imgLnk3Parameter = imgLnk3 != null ?
                new ObjectParameter("ImgLnk3", imgLnk3) :
                new ObjectParameter("ImgLnk3", typeof(string));
    
            var imgLnk4Parameter = imgLnk4 != null ?
                new ObjectParameter("ImgLnk4", imgLnk4) :
                new ObjectParameter("ImgLnk4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("uspUpSertMPIImages", idParameter, dealeridParameter, dealerEmpGuidParameter, personGuidParameter, imgLnk1Parameter, imgLnk2Parameter, imgLnk3Parameter, imgLnk4Parameter);
        }
    
        public virtual int uspUpdatePersonVehicleLite(Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> personGuid, string lastName, string firstName, string emailAddress, string phoneNumber, string address1, string address2, string city, string state, string zipCode, string dealerPersonGroupId, string nextServiceDate, string nextInspectionDate, string nextEmisisonDate, string nextSvcInfo, string vIN, string vehicleYear, string vehicleName, string plate, string vehicleYrMkMod, Nullable<bool> isValid, Nullable<short> insuranceId, string insuranceExpDate, string policyNumber, string vehBodyType, string vehicleCounty, string brakeTypeFront, string brakeTypeRear, string lFBrakeBondRivet, string rFBrakeBondRivet, string lRBrakeBondRivet, string rRBrakeBondRivet, string vehicleMake, string vehicleModel)
        {
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var dealerPersonGroupIdParameter = dealerPersonGroupId != null ?
                new ObjectParameter("DealerPersonGroupId", dealerPersonGroupId) :
                new ObjectParameter("DealerPersonGroupId", typeof(string));
    
            var nextServiceDateParameter = nextServiceDate != null ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(string));
    
            var nextInspectionDateParameter = nextInspectionDate != null ?
                new ObjectParameter("NextInspectionDate", nextInspectionDate) :
                new ObjectParameter("NextInspectionDate", typeof(string));
    
            var nextEmisisonDateParameter = nextEmisisonDate != null ?
                new ObjectParameter("NextEmisisonDate", nextEmisisonDate) :
                new ObjectParameter("NextEmisisonDate", typeof(string));
    
            var nextSvcInfoParameter = nextSvcInfo != null ?
                new ObjectParameter("NextSvcInfo", nextSvcInfo) :
                new ObjectParameter("NextSvcInfo", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var vehicleYearParameter = vehicleYear != null ?
                new ObjectParameter("VehicleYear", vehicleYear) :
                new ObjectParameter("VehicleYear", typeof(string));
    
            var vehicleNameParameter = vehicleName != null ?
                new ObjectParameter("VehicleName", vehicleName) :
                new ObjectParameter("VehicleName", typeof(string));
    
            var plateParameter = plate != null ?
                new ObjectParameter("Plate", plate) :
                new ObjectParameter("Plate", typeof(string));
    
            var vehicleYrMkModParameter = vehicleYrMkMod != null ?
                new ObjectParameter("VehicleYrMkMod", vehicleYrMkMod) :
                new ObjectParameter("VehicleYrMkMod", typeof(string));
    
            var isValidParameter = isValid.HasValue ?
                new ObjectParameter("IsValid", isValid) :
                new ObjectParameter("IsValid", typeof(bool));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(short));
    
            var insuranceExpDateParameter = insuranceExpDate != null ?
                new ObjectParameter("InsuranceExpDate", insuranceExpDate) :
                new ObjectParameter("InsuranceExpDate", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var vehBodyTypeParameter = vehBodyType != null ?
                new ObjectParameter("VehBodyType", vehBodyType) :
                new ObjectParameter("VehBodyType", typeof(string));
    
            var vehicleCountyParameter = vehicleCounty != null ?
                new ObjectParameter("VehicleCounty", vehicleCounty) :
                new ObjectParameter("VehicleCounty", typeof(string));
    
            var brakeTypeFrontParameter = brakeTypeFront != null ?
                new ObjectParameter("BrakeTypeFront", brakeTypeFront) :
                new ObjectParameter("BrakeTypeFront", typeof(string));
    
            var brakeTypeRearParameter = brakeTypeRear != null ?
                new ObjectParameter("BrakeTypeRear", brakeTypeRear) :
                new ObjectParameter("BrakeTypeRear", typeof(string));
    
            var lFBrakeBondRivetParameter = lFBrakeBondRivet != null ?
                new ObjectParameter("LFBrakeBondRivet", lFBrakeBondRivet) :
                new ObjectParameter("LFBrakeBondRivet", typeof(string));
    
            var rFBrakeBondRivetParameter = rFBrakeBondRivet != null ?
                new ObjectParameter("RFBrakeBondRivet", rFBrakeBondRivet) :
                new ObjectParameter("RFBrakeBondRivet", typeof(string));
    
            var lRBrakeBondRivetParameter = lRBrakeBondRivet != null ?
                new ObjectParameter("LRBrakeBondRivet", lRBrakeBondRivet) :
                new ObjectParameter("LRBrakeBondRivet", typeof(string));
    
            var rRBrakeBondRivetParameter = rRBrakeBondRivet != null ?
                new ObjectParameter("RRBrakeBondRivet", rRBrakeBondRivet) :
                new ObjectParameter("RRBrakeBondRivet", typeof(string));
    
            var vehicleMakeParameter = vehicleMake != null ?
                new ObjectParameter("VehicleMake", vehicleMake) :
                new ObjectParameter("VehicleMake", typeof(string));
    
            var vehicleModelParameter = vehicleModel != null ?
                new ObjectParameter("VehicleModel", vehicleModel) :
                new ObjectParameter("VehicleModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePersonVehicleLite", vehicleGuidParameter, personGuidParameter, lastNameParameter, firstNameParameter, emailAddressParameter, phoneNumberParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipCodeParameter, dealerPersonGroupIdParameter, nextServiceDateParameter, nextInspectionDateParameter, nextEmisisonDateParameter, nextSvcInfoParameter, vINParameter, vehicleYearParameter, vehicleNameParameter, plateParameter, vehicleYrMkModParameter, isValidParameter, insuranceIdParameter, insuranceExpDateParameter, policyNumberParameter, vehBodyTypeParameter, vehicleCountyParameter, brakeTypeFrontParameter, brakeTypeRearParameter, lFBrakeBondRivetParameter, rFBrakeBondRivetParameter, lRBrakeBondRivetParameter, rRBrakeBondRivetParameter, vehicleMakeParameter, vehicleModelParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServicesByDealerEmp_Result> uspSelVehicleServicesByDealerEmp(Nullable<System.Guid> serviceWriterGuid, Nullable<System.Guid> techGuid)
        {
            var serviceWriterGuidParameter = serviceWriterGuid.HasValue ?
                new ObjectParameter("ServiceWriterGuid", serviceWriterGuid) :
                new ObjectParameter("ServiceWriterGuid", typeof(System.Guid));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServicesByDealerEmp_Result>("uspSelVehicleServicesByDealerEmp", serviceWriterGuidParameter, techGuidParameter);
        }
    
        public virtual ObjectResult<uspRegisterCustomerMyShopAuto_Result> uspRegisterCustomerMyShopAuto(Nullable<int> dealerId, Nullable<int> dealerFamilyId, string firstName, string middleName, string lastName, string email, string phone, string addressLine1, string addressLine2, string addressLine3, string city, string state, string zip, string vehicleYrMkMod, string nextInspectionDate, string nextServiceDate, string nextSvcInfo, string vehPhId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var vehicleYrMkModParameter = vehicleYrMkMod != null ?
                new ObjectParameter("VehicleYrMkMod", vehicleYrMkMod) :
                new ObjectParameter("VehicleYrMkMod", typeof(string));
    
            var nextInspectionDateParameter = nextInspectionDate != null ?
                new ObjectParameter("NextInspectionDate", nextInspectionDate) :
                new ObjectParameter("NextInspectionDate", typeof(string));
    
            var nextServiceDateParameter = nextServiceDate != null ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(string));
    
            var nextSvcInfoParameter = nextSvcInfo != null ?
                new ObjectParameter("NextSvcInfo", nextSvcInfo) :
                new ObjectParameter("NextSvcInfo", typeof(string));
    
            var vehPhIdParameter = vehPhId != null ?
                new ObjectParameter("VehPhId", vehPhId) :
                new ObjectParameter("VehPhId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRegisterCustomerMyShopAuto_Result>("uspRegisterCustomerMyShopAuto", dealerIdParameter, dealerFamilyIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, emailParameter, phoneParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, stateParameter, zipParameter, vehicleYrMkModParameter, nextInspectionDateParameter, nextServiceDateParameter, nextSvcInfoParameter, vehPhIdParameter);
        }
    
        public virtual ObjectResult<uspUpdateCustomerMyShopAuto_Result> uspUpdateCustomerMyShopAuto(Nullable<int> dealerId, Nullable<System.Guid> personGUID, Nullable<int> vehicleId, string firstName, string middleName, string lastName, string email, string phone, string addressLine1, string addressLine2, string city, string state, string zip, string vehicleYrMkMod, string nextInspectionDate, string nextServiceDate, string nextSvcInfo, string vehPhId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var vehicleYrMkModParameter = vehicleYrMkMod != null ?
                new ObjectParameter("VehicleYrMkMod", vehicleYrMkMod) :
                new ObjectParameter("VehicleYrMkMod", typeof(string));
    
            var nextInspectionDateParameter = nextInspectionDate != null ?
                new ObjectParameter("NextInspectionDate", nextInspectionDate) :
                new ObjectParameter("NextInspectionDate", typeof(string));
    
            var nextServiceDateParameter = nextServiceDate != null ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(string));
    
            var nextSvcInfoParameter = nextSvcInfo != null ?
                new ObjectParameter("NextSvcInfo", nextSvcInfo) :
                new ObjectParameter("NextSvcInfo", typeof(string));
    
            var vehPhIdParameter = vehPhId != null ?
                new ObjectParameter("VehPhId", vehPhId) :
                new ObjectParameter("VehPhId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdateCustomerMyShopAuto_Result>("uspUpdateCustomerMyShopAuto", dealerIdParameter, personGUIDParameter, vehicleIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, emailParameter, phoneParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateParameter, zipParameter, vehicleYrMkModParameter, nextInspectionDateParameter, nextServiceDateParameter, nextSvcInfoParameter, vehPhIdParameter);
        }
    
        public virtual ObjectResult<uspSelMPIRedYellowByPersonGuid_Result> uspSelMPIRedYellowByPersonGuid(Nullable<int> dealerId, Nullable<System.Guid> personGuid, string vehPhId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var vehPhIdParameter = vehPhId != null ?
                new ObjectParameter("VehPhId", vehPhId) :
                new ObjectParameter("VehPhId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelMPIRedYellowByPersonGuid_Result>("uspSelMPIRedYellowByPersonGuid", dealerIdParameter, personGuidParameter, vehPhIdParameter);
        }
    
        public virtual int uspUpdateMPIRedYellow(Nullable<int> dealerId, Nullable<System.Guid> personGuid, Nullable<System.Guid> masterMPIGuid, string mPIItemId, string custcomments, string custacceptedYN, string vehPhId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var masterMPIGuidParameter = masterMPIGuid.HasValue ?
                new ObjectParameter("MasterMPIGuid", masterMPIGuid) :
                new ObjectParameter("MasterMPIGuid", typeof(System.Guid));
    
            var mPIItemIdParameter = mPIItemId != null ?
                new ObjectParameter("MPIItemId", mPIItemId) :
                new ObjectParameter("MPIItemId", typeof(string));
    
            var custcommentsParameter = custcomments != null ?
                new ObjectParameter("Custcomments", custcomments) :
                new ObjectParameter("Custcomments", typeof(string));
    
            var custacceptedYNParameter = custacceptedYN != null ?
                new ObjectParameter("CustacceptedYN", custacceptedYN) :
                new ObjectParameter("CustacceptedYN", typeof(string));
    
            var vehPhIdParameter = vehPhId != null ?
                new ObjectParameter("VehPhId", vehPhId) :
                new ObjectParameter("VehPhId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMPIRedYellow", dealerIdParameter, personGuidParameter, masterMPIGuidParameter, mPIItemIdParameter, custcommentsParameter, custacceptedYNParameter, vehPhIdParameter);
        }
    
        public virtual int uspUpdateIsVehicleInShop(Nullable<System.Guid> vehicleGuid, Nullable<bool> isVehicleInShop)
        {
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var isVehicleInShopParameter = isVehicleInShop.HasValue ?
                new ObjectParameter("IsVehicleInShop", isVehicleInShop) :
                new ObjectParameter("IsVehicleInShop", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateIsVehicleInShop", vehicleGuidParameter, isVehicleInShopParameter);
        }
    
        public virtual int uspCloseVehicleSericeTask(Nullable<System.Guid> vehicleServiceGUID, Nullable<int> serviceTypeId, Nullable<System.Guid> taskClosedBy)
        {
            var vehicleServiceGUIDParameter = vehicleServiceGUID.HasValue ?
                new ObjectParameter("VehicleServiceGUID", vehicleServiceGUID) :
                new ObjectParameter("VehicleServiceGUID", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var taskClosedByParameter = taskClosedBy.HasValue ?
                new ObjectParameter("TaskClosedBy", taskClosedBy) :
                new ObjectParameter("TaskClosedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCloseVehicleSericeTask", vehicleServiceGUIDParameter, serviceTypeIdParameter, taskClosedByParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServicePricingParts_Result> uspSelVehicleServicePricingParts(Nullable<int> dealerId, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> sWGuid, Nullable<System.Guid> techGuid, Nullable<System.Guid> partGuid, Nullable<int> serviceTypeId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var sWGuidParameter = sWGuid.HasValue ?
                new ObjectParameter("SWGuid", sWGuid) :
                new ObjectParameter("SWGuid", typeof(System.Guid));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            var partGuidParameter = partGuid.HasValue ?
                new ObjectParameter("PartGuid", partGuid) :
                new ObjectParameter("PartGuid", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServicePricingParts_Result>("uspSelVehicleServicePricingParts", dealerIdParameter, vehicleGuidParameter, sWGuidParameter, techGuidParameter, partGuidParameter, serviceTypeIdParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServicePricingSW_Result> uspSelVehicleServicePricingSW(Nullable<int> dealerId, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> sWGuid, Nullable<System.Guid> techGuid, Nullable<System.Guid> partGuid, Nullable<int> serviceTypeId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var sWGuidParameter = sWGuid.HasValue ?
                new ObjectParameter("SWGuid", sWGuid) :
                new ObjectParameter("SWGuid", typeof(System.Guid));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            var partGuidParameter = partGuid.HasValue ?
                new ObjectParameter("PartGuid", partGuid) :
                new ObjectParameter("PartGuid", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServicePricingSW_Result>("uspSelVehicleServicePricingSW", dealerIdParameter, vehicleGuidParameter, sWGuidParameter, techGuidParameter, partGuidParameter, serviceTypeIdParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServicePricingTech_Result> uspSelVehicleServicePricingTech(Nullable<int> dealerId, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> sWGuid, Nullable<System.Guid> techGuid, Nullable<System.Guid> partGuid, Nullable<int> serviceTypeId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var sWGuidParameter = sWGuid.HasValue ?
                new ObjectParameter("SWGuid", sWGuid) :
                new ObjectParameter("SWGuid", typeof(System.Guid));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            var partGuidParameter = partGuid.HasValue ?
                new ObjectParameter("PartGuid", partGuid) :
                new ObjectParameter("PartGuid", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServicePricingTech_Result>("uspSelVehicleServicePricingTech", dealerIdParameter, vehicleGuidParameter, sWGuidParameter, techGuidParameter, partGuidParameter, serviceTypeIdParameter);
        }
    
        public virtual ObjectResult<uspSelCustomerByGuid_Result> uspSelCustomerByGuid(Nullable<System.Guid> personGUID)
        {
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelCustomerByGuid_Result>("uspSelCustomerByGuid", personGUIDParameter);
        }
    
        public virtual int uspUpsertVehicleServiceMPI(Nullable<System.Guid> mPIMasterGuid, Nullable<System.Guid> vehicleServiceGuid, string techComments, string techWriterComments, Nullable<System.Guid> enteredBy, Nullable<System.Guid> personGuid, Nullable<int> dealerId, Nullable<System.Guid> vehicleGUID, string milesIn, string milesOut, string roNum, string fleetNumber)
        {
            var mPIMasterGuidParameter = mPIMasterGuid.HasValue ?
                new ObjectParameter("MPIMasterGuid", mPIMasterGuid) :
                new ObjectParameter("MPIMasterGuid", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var techCommentsParameter = techComments != null ?
                new ObjectParameter("TechComments", techComments) :
                new ObjectParameter("TechComments", typeof(string));
    
            var techWriterCommentsParameter = techWriterComments != null ?
                new ObjectParameter("TechWriterComments", techWriterComments) :
                new ObjectParameter("TechWriterComments", typeof(string));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGUIDParameter = vehicleGUID.HasValue ?
                new ObjectParameter("VehicleGUID", vehicleGUID) :
                new ObjectParameter("VehicleGUID", typeof(System.Guid));
    
            var milesInParameter = milesIn != null ?
                new ObjectParameter("MilesIn", milesIn) :
                new ObjectParameter("MilesIn", typeof(string));
    
            var milesOutParameter = milesOut != null ?
                new ObjectParameter("MilesOut", milesOut) :
                new ObjectParameter("MilesOut", typeof(string));
    
            var roNumParameter = roNum != null ?
                new ObjectParameter("RoNum", roNum) :
                new ObjectParameter("RoNum", typeof(string));
    
            var fleetNumberParameter = fleetNumber != null ?
                new ObjectParameter("FleetNumber", fleetNumber) :
                new ObjectParameter("FleetNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertVehicleServiceMPI", mPIMasterGuidParameter, vehicleServiceGuidParameter, techCommentsParameter, techWriterCommentsParameter, enteredByParameter, personGuidParameter, dealerIdParameter, vehicleGUIDParameter, milesInParameter, milesOutParameter, roNumParameter, fleetNumberParameter);
        }
    
        public virtual int uspUpsertMPIByPersonGuid(Nullable<int> dealerId, Nullable<System.Guid> personGuid, Nullable<System.Guid> vehicleGUID, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> mPIMasterGuid, string techComments, string techWriterComments, Nullable<System.Guid> enteredBy, string milesIn, string milesOut, string roNum, string fleetNumber, string tirePressure, string xmlStr)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var vehicleGUIDParameter = vehicleGUID.HasValue ?
                new ObjectParameter("VehicleGUID", vehicleGUID) :
                new ObjectParameter("VehicleGUID", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var mPIMasterGuidParameter = mPIMasterGuid.HasValue ?
                new ObjectParameter("MPIMasterGuid", mPIMasterGuid) :
                new ObjectParameter("MPIMasterGuid", typeof(System.Guid));
    
            var techCommentsParameter = techComments != null ?
                new ObjectParameter("TechComments", techComments) :
                new ObjectParameter("TechComments", typeof(string));
    
            var techWriterCommentsParameter = techWriterComments != null ?
                new ObjectParameter("TechWriterComments", techWriterComments) :
                new ObjectParameter("TechWriterComments", typeof(string));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(System.Guid));
    
            var milesInParameter = milesIn != null ?
                new ObjectParameter("MilesIn", milesIn) :
                new ObjectParameter("MilesIn", typeof(string));
    
            var milesOutParameter = milesOut != null ?
                new ObjectParameter("MilesOut", milesOut) :
                new ObjectParameter("MilesOut", typeof(string));
    
            var roNumParameter = roNum != null ?
                new ObjectParameter("RoNum", roNum) :
                new ObjectParameter("RoNum", typeof(string));
    
            var fleetNumberParameter = fleetNumber != null ?
                new ObjectParameter("FleetNumber", fleetNumber) :
                new ObjectParameter("FleetNumber", typeof(string));
    
            var tirePressureParameter = tirePressure != null ?
                new ObjectParameter("TirePressure", tirePressure) :
                new ObjectParameter("TirePressure", typeof(string));
    
            var xmlStrParameter = xmlStr != null ?
                new ObjectParameter("xmlStr", xmlStr) :
                new ObjectParameter("xmlStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpsertMPIByPersonGuid", dealerIdParameter, personGuidParameter, vehicleGUIDParameter, vehicleServiceGuidParameter, mPIMasterGuidParameter, techCommentsParameter, techWriterCommentsParameter, enteredByParameter, milesInParameter, milesOutParameter, roNumParameter, fleetNumberParameter, tirePressureParameter, xmlStrParameter);
        }
    
        public virtual int uspUpdateMPICost(Nullable<System.Guid> vehicleServiceMPIMasterGuid, Nullable<int> mPIItemId, Nullable<decimal> cost, Nullable<decimal> laborCost, Nullable<decimal> totalCost, Nullable<bool> isSendToCust, string partDesc)
        {
            var vehicleServiceMPIMasterGuidParameter = vehicleServiceMPIMasterGuid.HasValue ?
                new ObjectParameter("VehicleServiceMPIMasterGuid", vehicleServiceMPIMasterGuid) :
                new ObjectParameter("VehicleServiceMPIMasterGuid", typeof(System.Guid));
    
            var mPIItemIdParameter = mPIItemId.HasValue ?
                new ObjectParameter("MPIItemId", mPIItemId) :
                new ObjectParameter("MPIItemId", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var laborCostParameter = laborCost.HasValue ?
                new ObjectParameter("LaborCost", laborCost) :
                new ObjectParameter("LaborCost", typeof(decimal));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var isSendToCustParameter = isSendToCust.HasValue ?
                new ObjectParameter("IsSendToCust", isSendToCust) :
                new ObjectParameter("IsSendToCust", typeof(bool));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMPICost", vehicleServiceMPIMasterGuidParameter, mPIItemIdParameter, costParameter, laborCostParameter, totalCostParameter, isSendToCustParameter, partDescParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServiceMPIStatus_Result> uspSelVehicleServiceMPIStatus(Nullable<int> dealerId, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> sWGuid, Nullable<System.Guid> techGuid, Nullable<System.Guid> partGuid, Nullable<int> serviceTypeId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var sWGuidParameter = sWGuid.HasValue ?
                new ObjectParameter("SWGuid", sWGuid) :
                new ObjectParameter("SWGuid", typeof(System.Guid));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            var partGuidParameter = partGuid.HasValue ?
                new ObjectParameter("PartGuid", partGuid) :
                new ObjectParameter("PartGuid", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServiceMPIStatus_Result>("uspSelVehicleServiceMPIStatus", dealerIdParameter, vehicleServiceGuidParameter, vehicleGuidParameter, sWGuidParameter, techGuidParameter, partGuidParameter, serviceTypeIdParameter);
        }
    
        public virtual int uspCloseVehicleSericeRO(Nullable<System.Guid> vehicleServiceGUID, Nullable<int> serviceTypeId, Nullable<System.Guid> rOClosedBy)
        {
            var vehicleServiceGUIDParameter = vehicleServiceGUID.HasValue ?
                new ObjectParameter("VehicleServiceGUID", vehicleServiceGUID) :
                new ObjectParameter("VehicleServiceGUID", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var rOClosedByParameter = rOClosedBy.HasValue ?
                new ObjectParameter("ROClosedBy", rOClosedBy) :
                new ObjectParameter("ROClosedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCloseVehicleSericeRO", vehicleServiceGUIDParameter, serviceTypeIdParameter, rOClosedByParameter);
        }
    
        public virtual ObjectResult<uspSelMPISubmitHistory_Result> uspSelMPISubmitHistory(Nullable<System.Guid> vehicleServiceGuid)
        {
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelMPISubmitHistory_Result>("uspSelMPISubmitHistory", vehicleServiceGuidParameter);
        }
    
        public virtual ObjectResult<uspSelVehicleServicePricing_Result> uspSelVehicleServicePricing(Nullable<int> dealerId, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> sWGuid, Nullable<System.Guid> techGuid, Nullable<System.Guid> partGuid, Nullable<int> serviceTypeId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var sWGuidParameter = sWGuid.HasValue ?
                new ObjectParameter("SWGuid", sWGuid) :
                new ObjectParameter("SWGuid", typeof(System.Guid));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            var partGuidParameter = partGuid.HasValue ?
                new ObjectParameter("PartGuid", partGuid) :
                new ObjectParameter("PartGuid", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelVehicleServicePricing_Result>("uspSelVehicleServicePricing", dealerIdParameter, vehicleGuidParameter, sWGuidParameter, techGuidParameter, partGuidParameter, serviceTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> uspCreateNewCustomer(Nullable<int> dealerId, Nullable<int> dealerFamilyId, string firstName, string middleName, string lastName, string emailAddress, string phoneNumber, string addressLine1, string addressLine2, string addressLine3, string city, string state, string zip, string plate, string vIN, string nextServiceDate, string nextInspectionDate, string nextEmisisonDate, string nextSvcInfo, Nullable<short> vehicleYear, Nullable<int> currentMileage, Nullable<int> yearlyMiles, string vehicleName, string vehicleYrMkMod, string dealerPersonGroupId, string customerIdExternal, string fleetNumber, Nullable<short> insuranceId, string insuranceExpDate, string policyNumber, string vehBodyType, string vehicleCounty, string brakeTypeFront, string brakeTypeRear, string lFBrakeBondRivet, string rFBrakeBondRivet, string lRBrakeBondRivet, string rRBrakeBondRivet, string vehicleMake, string vehicleModel)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var dealerFamilyIdParameter = dealerFamilyId.HasValue ?
                new ObjectParameter("DealerFamilyId", dealerFamilyId) :
                new ObjectParameter("DealerFamilyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var plateParameter = plate != null ?
                new ObjectParameter("Plate", plate) :
                new ObjectParameter("Plate", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var nextServiceDateParameter = nextServiceDate != null ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(string));
    
            var nextInspectionDateParameter = nextInspectionDate != null ?
                new ObjectParameter("NextInspectionDate", nextInspectionDate) :
                new ObjectParameter("NextInspectionDate", typeof(string));
    
            var nextEmisisonDateParameter = nextEmisisonDate != null ?
                new ObjectParameter("NextEmisisonDate", nextEmisisonDate) :
                new ObjectParameter("NextEmisisonDate", typeof(string));
    
            var nextSvcInfoParameter = nextSvcInfo != null ?
                new ObjectParameter("NextSvcInfo", nextSvcInfo) :
                new ObjectParameter("NextSvcInfo", typeof(string));
    
            var vehicleYearParameter = vehicleYear.HasValue ?
                new ObjectParameter("VehicleYear", vehicleYear) :
                new ObjectParameter("VehicleYear", typeof(short));
    
            var currentMileageParameter = currentMileage.HasValue ?
                new ObjectParameter("CurrentMileage", currentMileage) :
                new ObjectParameter("CurrentMileage", typeof(int));
    
            var yearlyMilesParameter = yearlyMiles.HasValue ?
                new ObjectParameter("YearlyMiles", yearlyMiles) :
                new ObjectParameter("YearlyMiles", typeof(int));
    
            var vehicleNameParameter = vehicleName != null ?
                new ObjectParameter("VehicleName", vehicleName) :
                new ObjectParameter("VehicleName", typeof(string));
    
            var vehicleYrMkModParameter = vehicleYrMkMod != null ?
                new ObjectParameter("VehicleYrMkMod", vehicleYrMkMod) :
                new ObjectParameter("VehicleYrMkMod", typeof(string));
    
            var dealerPersonGroupIdParameter = dealerPersonGroupId != null ?
                new ObjectParameter("DealerPersonGroupId", dealerPersonGroupId) :
                new ObjectParameter("DealerPersonGroupId", typeof(string));
    
            var customerIdExternalParameter = customerIdExternal != null ?
                new ObjectParameter("CustomerIdExternal", customerIdExternal) :
                new ObjectParameter("CustomerIdExternal", typeof(string));
    
            var fleetNumberParameter = fleetNumber != null ?
                new ObjectParameter("FleetNumber", fleetNumber) :
                new ObjectParameter("FleetNumber", typeof(string));
    
            var insuranceIdParameter = insuranceId.HasValue ?
                new ObjectParameter("InsuranceId", insuranceId) :
                new ObjectParameter("InsuranceId", typeof(short));
    
            var insuranceExpDateParameter = insuranceExpDate != null ?
                new ObjectParameter("InsuranceExpDate", insuranceExpDate) :
                new ObjectParameter("InsuranceExpDate", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var vehBodyTypeParameter = vehBodyType != null ?
                new ObjectParameter("VehBodyType", vehBodyType) :
                new ObjectParameter("VehBodyType", typeof(string));
    
            var vehicleCountyParameter = vehicleCounty != null ?
                new ObjectParameter("VehicleCounty", vehicleCounty) :
                new ObjectParameter("VehicleCounty", typeof(string));
    
            var brakeTypeFrontParameter = brakeTypeFront != null ?
                new ObjectParameter("BrakeTypeFront", brakeTypeFront) :
                new ObjectParameter("BrakeTypeFront", typeof(string));
    
            var brakeTypeRearParameter = brakeTypeRear != null ?
                new ObjectParameter("BrakeTypeRear", brakeTypeRear) :
                new ObjectParameter("BrakeTypeRear", typeof(string));
    
            var lFBrakeBondRivetParameter = lFBrakeBondRivet != null ?
                new ObjectParameter("LFBrakeBondRivet", lFBrakeBondRivet) :
                new ObjectParameter("LFBrakeBondRivet", typeof(string));
    
            var rFBrakeBondRivetParameter = rFBrakeBondRivet != null ?
                new ObjectParameter("RFBrakeBondRivet", rFBrakeBondRivet) :
                new ObjectParameter("RFBrakeBondRivet", typeof(string));
    
            var lRBrakeBondRivetParameter = lRBrakeBondRivet != null ?
                new ObjectParameter("LRBrakeBondRivet", lRBrakeBondRivet) :
                new ObjectParameter("LRBrakeBondRivet", typeof(string));
    
            var rRBrakeBondRivetParameter = rRBrakeBondRivet != null ?
                new ObjectParameter("RRBrakeBondRivet", rRBrakeBondRivet) :
                new ObjectParameter("RRBrakeBondRivet", typeof(string));
    
            var vehicleMakeParameter = vehicleMake != null ?
                new ObjectParameter("VehicleMake", vehicleMake) :
                new ObjectParameter("VehicleMake", typeof(string));
    
            var vehicleModelParameter = vehicleModel != null ?
                new ObjectParameter("VehicleModel", vehicleModel) :
                new ObjectParameter("VehicleModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("uspCreateNewCustomer", dealerIdParameter, dealerFamilyIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, emailAddressParameter, phoneNumberParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, cityParameter, stateParameter, zipParameter, plateParameter, vINParameter, nextServiceDateParameter, nextInspectionDateParameter, nextEmisisonDateParameter, nextSvcInfoParameter, vehicleYearParameter, currentMileageParameter, yearlyMilesParameter, vehicleNameParameter, vehicleYrMkModParameter, dealerPersonGroupIdParameter, customerIdExternalParameter, fleetNumberParameter, insuranceIdParameter, insuranceExpDateParameter, policyNumberParameter, vehBodyTypeParameter, vehicleCountyParameter, brakeTypeFrontParameter, brakeTypeRearParameter, lFBrakeBondRivetParameter, rFBrakeBondRivetParameter, lRBrakeBondRivetParameter, rRBrakeBondRivetParameter, vehicleMakeParameter, vehicleModelParameter);
        }
    
        public virtual ObjectResult<uspSelMPIVehicleServiceByDealerId_Result> uspSelMPIVehicleServiceByDealerId(Nullable<int> dealerId, Nullable<System.Guid> personGuid, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleServiceMPIMasterGuid)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var vehicleServiceMPIMasterGuidParameter = vehicleServiceMPIMasterGuid.HasValue ?
                new ObjectParameter("VehicleServiceMPIMasterGuid", vehicleServiceMPIMasterGuid) :
                new ObjectParameter("VehicleServiceMPIMasterGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelMPIVehicleServiceByDealerId_Result>("uspSelMPIVehicleServiceByDealerId", dealerIdParameter, personGuidParameter, vehicleGuidParameter, vehicleServiceGuidParameter, vehicleServiceMPIMasterGuidParameter);
        }
    
        public virtual int uspUPSertVehicleServicePricing(Nullable<long> servicePricingId, Nullable<System.Guid> vehicleServiceGuid, Nullable<int> serviceTypeId, Nullable<int> mPIItem, Nullable<System.Guid> vehicleServiceMPIMasterGuid, string partNumber, string partDesc, string timeTaken, string techComments, Nullable<decimal> partCost, string partComments, Nullable<System.DateTime> priceRequestedDt, Nullable<System.DateTime> priceQuotedDt, Nullable<bool> isSendToPricing, Nullable<System.Guid> techGuid, Nullable<System.Guid> partGuid, Nullable<System.Guid> svcsWriterGuid, Nullable<decimal> totalCost, Nullable<bool> isSendToCust)
        {
            var servicePricingIdParameter = servicePricingId.HasValue ?
                new ObjectParameter("ServicePricingId", servicePricingId) :
                new ObjectParameter("ServicePricingId", typeof(long));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var mPIItemParameter = mPIItem.HasValue ?
                new ObjectParameter("MPIItem", mPIItem) :
                new ObjectParameter("MPIItem", typeof(int));
    
            var vehicleServiceMPIMasterGuidParameter = vehicleServiceMPIMasterGuid.HasValue ?
                new ObjectParameter("VehicleServiceMPIMasterGuid", vehicleServiceMPIMasterGuid) :
                new ObjectParameter("VehicleServiceMPIMasterGuid", typeof(System.Guid));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var partDescParameter = partDesc != null ?
                new ObjectParameter("PartDesc", partDesc) :
                new ObjectParameter("PartDesc", typeof(string));
    
            var timeTakenParameter = timeTaken != null ?
                new ObjectParameter("TimeTaken", timeTaken) :
                new ObjectParameter("TimeTaken", typeof(string));
    
            var techCommentsParameter = techComments != null ?
                new ObjectParameter("TechComments", techComments) :
                new ObjectParameter("TechComments", typeof(string));
    
            var partCostParameter = partCost.HasValue ?
                new ObjectParameter("PartCost", partCost) :
                new ObjectParameter("PartCost", typeof(decimal));
    
            var partCommentsParameter = partComments != null ?
                new ObjectParameter("PartComments", partComments) :
                new ObjectParameter("PartComments", typeof(string));
    
            var priceRequestedDtParameter = priceRequestedDt.HasValue ?
                new ObjectParameter("PriceRequestedDt", priceRequestedDt) :
                new ObjectParameter("PriceRequestedDt", typeof(System.DateTime));
    
            var priceQuotedDtParameter = priceQuotedDt.HasValue ?
                new ObjectParameter("PriceQuotedDt", priceQuotedDt) :
                new ObjectParameter("PriceQuotedDt", typeof(System.DateTime));
    
            var isSendToPricingParameter = isSendToPricing.HasValue ?
                new ObjectParameter("IsSendToPricing", isSendToPricing) :
                new ObjectParameter("IsSendToPricing", typeof(bool));
    
            var techGuidParameter = techGuid.HasValue ?
                new ObjectParameter("TechGuid", techGuid) :
                new ObjectParameter("TechGuid", typeof(System.Guid));
    
            var partGuidParameter = partGuid.HasValue ?
                new ObjectParameter("PartGuid", partGuid) :
                new ObjectParameter("PartGuid", typeof(System.Guid));
    
            var svcsWriterGuidParameter = svcsWriterGuid.HasValue ?
                new ObjectParameter("SvcsWriterGuid", svcsWriterGuid) :
                new ObjectParameter("SvcsWriterGuid", typeof(System.Guid));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var isSendToCustParameter = isSendToCust.HasValue ?
                new ObjectParameter("IsSendToCust", isSendToCust) :
                new ObjectParameter("IsSendToCust", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUPSertVehicleServicePricing", servicePricingIdParameter, vehicleServiceGuidParameter, serviceTypeIdParameter, mPIItemParameter, vehicleServiceMPIMasterGuidParameter, partNumberParameter, partDescParameter, timeTakenParameter, techCommentsParameter, partCostParameter, partCommentsParameter, priceRequestedDtParameter, priceQuotedDtParameter, isSendToPricingParameter, techGuidParameter, partGuidParameter, svcsWriterGuidParameter, totalCostParameter, isSendToCustParameter);
        }
    
        public virtual ObjectResult<uspAssignKeylockerPin_Result> uspAssignKeylockerPin(Nullable<int> dealerId, Nullable<System.Guid> customerGuid, Nullable<System.Guid> vehicleGuid, Nullable<bool> isPickUpOrDrop)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var customerGuidParameter = customerGuid.HasValue ?
                new ObjectParameter("CustomerGuid", customerGuid) :
                new ObjectParameter("CustomerGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var isPickUpOrDropParameter = isPickUpOrDrop.HasValue ?
                new ObjectParameter("IsPickUpOrDrop", isPickUpOrDrop) :
                new ObjectParameter("IsPickUpOrDrop", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAssignKeylockerPin_Result>("uspAssignKeylockerPin", dealerIdParameter, customerGuidParameter, vehicleGuidParameter, isPickUpOrDropParameter);
        }
    
        public virtual ObjectResult<uspLoginReCallDealerEmployee_Result> uspLoginReCallDealerEmployee(Nullable<int> dealerId, string userEmail, string password)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoginReCallDealerEmployee_Result>("uspLoginReCallDealerEmployee", dealerIdParameter, userEmailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<UspSelCustomerVehicleInfo_Result> UspSelCustomerVehicleInfo(Nullable<long> relatedId, string emailAddress, string phoneNumber)
        {
            var relatedIdParameter = relatedId.HasValue ?
                new ObjectParameter("RelatedId", relatedId) :
                new ObjectParameter("RelatedId", typeof(long));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspSelCustomerVehicleInfo_Result>("UspSelCustomerVehicleInfo", relatedIdParameter, emailAddressParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<uspSelAllRelatedCustomerVehicleInfo_Result> uspSelAllRelatedCustomerVehicleInfo(Nullable<long> relatedId, string emailAddress, string phoneNumber)
        {
            var relatedIdParameter = relatedId.HasValue ?
                new ObjectParameter("RelatedId", relatedId) :
                new ObjectParameter("RelatedId", typeof(long));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelAllRelatedCustomerVehicleInfo_Result>("uspSelAllRelatedCustomerVehicleInfo", relatedIdParameter, emailAddressParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<uspLoginDealerEmp_Result> uspLoginDealerEmp(Nullable<int> dealerId, string userEmail, string password)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoginDealerEmp_Result>("uspLoginDealerEmp", dealerIdParameter, userEmailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> uspVerifyKeylockerPin(Nullable<int> dealerId, Nullable<System.Guid> customerGuid, Nullable<System.Guid> vehicleGuid, Nullable<bool> isPickUpOrDrop, string keyLockerPin)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var customerGuidParameter = customerGuid.HasValue ?
                new ObjectParameter("CustomerGuid", customerGuid) :
                new ObjectParameter("CustomerGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var isPickUpOrDropParameter = isPickUpOrDrop.HasValue ?
                new ObjectParameter("IsPickUpOrDrop", isPickUpOrDrop) :
                new ObjectParameter("IsPickUpOrDrop", typeof(bool));
    
            var keyLockerPinParameter = keyLockerPin != null ?
                new ObjectParameter("KeyLockerPin", keyLockerPin) :
                new ObjectParameter("KeyLockerPin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspVerifyKeylockerPin", dealerIdParameter, customerGuidParameter, vehicleGuidParameter, isPickUpOrDropParameter, keyLockerPinParameter);
        }
    
        public virtual int uspInsDealerMsgWeb(Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleGuid, Nullable<System.Guid> dealerEmpGuid, Nullable<System.Guid> personGuid, Nullable<int> dealerId, string msgFrom, string msgTo, string txtMsg, Nullable<bool> isCustMsg, Nullable<bool> isMsgToCust)
        {
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var msgFromParameter = msgFrom != null ?
                new ObjectParameter("MsgFrom", msgFrom) :
                new ObjectParameter("MsgFrom", typeof(string));
    
            var msgToParameter = msgTo != null ?
                new ObjectParameter("MsgTo", msgTo) :
                new ObjectParameter("MsgTo", typeof(string));
    
            var txtMsgParameter = txtMsg != null ?
                new ObjectParameter("TxtMsg", txtMsg) :
                new ObjectParameter("TxtMsg", typeof(string));
    
            var isCustMsgParameter = isCustMsg.HasValue ?
                new ObjectParameter("IsCustMsg", isCustMsg) :
                new ObjectParameter("IsCustMsg", typeof(bool));
    
            var isMsgToCustParameter = isMsgToCust.HasValue ?
                new ObjectParameter("IsMsgToCust", isMsgToCust) :
                new ObjectParameter("IsMsgToCust", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsDealerMsgWeb", vehicleServiceGuidParameter, vehicleGuidParameter, dealerEmpGuidParameter, personGuidParameter, dealerIdParameter, msgFromParameter, msgToParameter, txtMsgParameter, isCustMsgParameter, isMsgToCustParameter);
        }
    
        public virtual int uspUpdKeyLockerPeg(Nullable<int> dealerId, Nullable<byte> keyLockerId, Nullable<byte> keyLockerPegId, Nullable<bool> isPickOrDrop, Nullable<System.Guid> vehicleServiceGuid, Nullable<byte> serviceStatusId, Nullable<bool> isOpen, Nullable<System.Guid> updatedBy)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var keyLockerIdParameter = keyLockerId.HasValue ?
                new ObjectParameter("KeyLockerId", keyLockerId) :
                new ObjectParameter("KeyLockerId", typeof(byte));
    
            var keyLockerPegIdParameter = keyLockerPegId.HasValue ?
                new ObjectParameter("KeyLockerPegId", keyLockerPegId) :
                new ObjectParameter("KeyLockerPegId", typeof(byte));
    
            var isPickOrDropParameter = isPickOrDrop.HasValue ?
                new ObjectParameter("IsPickOrDrop", isPickOrDrop) :
                new ObjectParameter("IsPickOrDrop", typeof(bool));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("ServiceStatusId", serviceStatusId) :
                new ObjectParameter("ServiceStatusId", typeof(byte));
    
            var isOpenParameter = isOpen.HasValue ?
                new ObjectParameter("IsOpen", isOpen) :
                new ObjectParameter("IsOpen", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdKeyLockerPeg", dealerIdParameter, keyLockerIdParameter, keyLockerPegIdParameter, isPickOrDropParameter, vehicleServiceGuidParameter, serviceStatusIdParameter, isOpenParameter, updatedByParameter);
        }
    
        public virtual int uspUpdtKeyLockerStatus(Nullable<int> dealerId, Nullable<byte> keyLockerId, Nullable<byte> keyLockerPegId, string statusDesc, Nullable<byte> statusId, Nullable<bool> isOpen)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var keyLockerIdParameter = keyLockerId.HasValue ?
                new ObjectParameter("KeyLockerId", keyLockerId) :
                new ObjectParameter("KeyLockerId", typeof(byte));
    
            var keyLockerPegIdParameter = keyLockerPegId.HasValue ?
                new ObjectParameter("KeyLockerPegId", keyLockerPegId) :
                new ObjectParameter("KeyLockerPegId", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            var isOpenParameter = isOpen.HasValue ?
                new ObjectParameter("IsOpen", isOpen) :
                new ObjectParameter("IsOpen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdtKeyLockerStatus", dealerIdParameter, keyLockerIdParameter, keyLockerPegIdParameter, statusDescParameter, statusIdParameter, isOpenParameter);
        }
    
        public virtual ObjectResult<uspSelCustomerDetailsByGuid_Result> uspSelCustomerDetailsByGuid(Nullable<int> dealerId, Nullable<System.Guid> personGuid, Nullable<int> vehicleId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("dealerId", dealerId) :
                new ObjectParameter("dealerId", typeof(int));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelCustomerDetailsByGuid_Result>("uspSelCustomerDetailsByGuid", dealerIdParameter, personGuidParameter, vehicleIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdVehSvcStatusByVehSvcId(Nullable<int> dealerId, Nullable<System.Guid> vehicleServiceGUID, Nullable<System.Guid> vehicleGUID, Nullable<System.Guid> personGUID, Nullable<byte> statusId, Nullable<System.Guid> updatedBy)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleServiceGUIDParameter = vehicleServiceGUID.HasValue ?
                new ObjectParameter("VehicleServiceGUID", vehicleServiceGUID) :
                new ObjectParameter("VehicleServiceGUID", typeof(System.Guid));
    
            var vehicleGUIDParameter = vehicleGUID.HasValue ?
                new ObjectParameter("VehicleGUID", vehicleGUID) :
                new ObjectParameter("VehicleGUID", typeof(System.Guid));
    
            var personGUIDParameter = personGUID.HasValue ?
                new ObjectParameter("PersonGUID", personGUID) :
                new ObjectParameter("PersonGUID", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdVehSvcStatusByVehSvcId", dealerIdParameter, vehicleServiceGUIDParameter, vehicleGUIDParameter, personGUIDParameter, statusIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<uspVerifyPinGetCustInfo_Result> uspVerifyPinGetCustInfo(Nullable<int> dealerId, Nullable<bool> isPickUpOrDrop, string keyLockerPin)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var isPickUpOrDropParameter = isPickUpOrDrop.HasValue ?
                new ObjectParameter("IsPickUpOrDrop", isPickUpOrDrop) :
                new ObjectParameter("IsPickUpOrDrop", typeof(bool));
    
            var keyLockerPinParameter = keyLockerPin != null ?
                new ObjectParameter("KeyLockerPin", keyLockerPin) :
                new ObjectParameter("KeyLockerPin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVerifyPinGetCustInfo_Result>("uspVerifyPinGetCustInfo", dealerIdParameter, isPickUpOrDropParameter, keyLockerPinParameter);
        }
    
        public virtual ObjectResult<uspGetKeyLockerSteps_Result> uspGetKeyLockerSteps(Nullable<int> dealerId, Nullable<byte> keyLockerId, Nullable<bool> isDropOrPickUp)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var keyLockerIdParameter = keyLockerId.HasValue ?
                new ObjectParameter("KeyLockerId", keyLockerId) :
                new ObjectParameter("KeyLockerId", typeof(byte));
    
            var isDropOrPickUpParameter = isDropOrPickUp.HasValue ?
                new ObjectParameter("IsDropOrPickUp", isDropOrPickUp) :
                new ObjectParameter("IsDropOrPickUp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetKeyLockerSteps_Result>("uspGetKeyLockerSteps", dealerIdParameter, keyLockerIdParameter, isDropOrPickUpParameter);
        }
    
        public virtual ObjectResult<string> uspGenerateOTP(Nullable<System.Guid> personGuid)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGenerateOTP", personGuidParameter);
        }
    
        public virtual int uspDeleteCustomerByGuid(Nullable<System.Guid> pGuid)
        {
            var pGuidParameter = pGuid.HasValue ?
                new ObjectParameter("pGuid", pGuid) :
                new ObjectParameter("pGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteCustomerByGuid", pGuidParameter);
        }
    
        public virtual ObjectResult<uspInsDealerPaymentTransaction_Result> uspInsDealerPaymentTransaction(Nullable<double> amount, Nullable<int> dealerId, Nullable<int> deptId, Nullable<System.Guid> dealerEmpGuid, string paymentGateway, string paymentStatus, Nullable<bool> recurringPayment)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var dealerEmpGuidParameter = dealerEmpGuid.HasValue ?
                new ObjectParameter("DealerEmpGuid", dealerEmpGuid) :
                new ObjectParameter("DealerEmpGuid", typeof(System.Guid));
    
            var paymentGatewayParameter = paymentGateway != null ?
                new ObjectParameter("PaymentGateway", paymentGateway) :
                new ObjectParameter("PaymentGateway", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var recurringPaymentParameter = recurringPayment.HasValue ?
                new ObjectParameter("RecurringPayment", recurringPayment) :
                new ObjectParameter("RecurringPayment", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsDealerPaymentTransaction_Result>("uspInsDealerPaymentTransaction", amountParameter, dealerIdParameter, deptIdParameter, dealerEmpGuidParameter, paymentGatewayParameter, paymentStatusParameter, recurringPaymentParameter);
        }
    
        public virtual int uspUpdateGoogleGuid(Nullable<System.Guid> personGuid, string googleGuid, Nullable<byte> deviceTypeID)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("personGuid", personGuid) :
                new ObjectParameter("personGuid", typeof(System.Guid));
    
            var googleGuidParameter = googleGuid != null ?
                new ObjectParameter("googleGuid", googleGuid) :
                new ObjectParameter("googleGuid", typeof(string));
    
            var deviceTypeIDParameter = deviceTypeID.HasValue ?
                new ObjectParameter("deviceTypeID", deviceTypeID) :
                new ObjectParameter("deviceTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGoogleGuid", personGuidParameter, googleGuidParameter, deviceTypeIDParameter);
        }
    
        public virtual int uspUpdateGoogleGuid1(Nullable<System.Guid> personGuid, string googleGuid, Nullable<byte> deviceTypeID)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("personGuid", personGuid) :
                new ObjectParameter("personGuid", typeof(System.Guid));
    
            var googleGuidParameter = googleGuid != null ?
                new ObjectParameter("googleGuid", googleGuid) :
                new ObjectParameter("googleGuid", typeof(string));
    
            var deviceTypeIDParameter = deviceTypeID.HasValue ?
                new ObjectParameter("deviceTypeID", deviceTypeID) :
                new ObjectParameter("deviceTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGoogleGuid1", personGuidParameter, googleGuidParameter, deviceTypeIDParameter);
        }
    
        public virtual ObjectResult<uspCreateSeviceAndKeyLockerBucket_TowTruck_Result> uspCreateSeviceAndKeyLockerBucket_TowTruck(Nullable<int> dealerId, string firstName, string phone, string svcInfo, Nullable<byte> serviceStatusId, Nullable<byte> assignedKeyLockerBucketId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var svcInfoParameter = svcInfo != null ?
                new ObjectParameter("SvcInfo", svcInfo) :
                new ObjectParameter("SvcInfo", typeof(string));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("ServiceStatusId", serviceStatusId) :
                new ObjectParameter("ServiceStatusId", typeof(byte));
    
            var assignedKeyLockerBucketIdParameter = assignedKeyLockerBucketId.HasValue ?
                new ObjectParameter("AssignedKeyLockerBucketId", assignedKeyLockerBucketId) :
                new ObjectParameter("AssignedKeyLockerBucketId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCreateSeviceAndKeyLockerBucket_TowTruck_Result>("uspCreateSeviceAndKeyLockerBucket_TowTruck", dealerIdParameter, firstNameParameter, phoneParameter, svcInfoParameter, serviceStatusIdParameter, assignedKeyLockerBucketIdParameter);
        }
    
        public virtual ObjectResult<uspSelAllKeyDropPegByDealerId_Result> uspSelAllKeyDropPegByDealerId(Nullable<int> dealerId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelAllKeyDropPegByDealerId_Result>("uspSelAllKeyDropPegByDealerId", dealerIdParameter);
        }
    
        public virtual ObjectResult<uspFindCustomerByPhPlateEmail_Result> uspFindCustomerByPhPlateEmail(string plate, string phone, string email, Nullable<System.Guid> personGuid, Nullable<System.Guid> vehicleGuid, string googleGuid)
        {
            var plateParameter = plate != null ?
                new ObjectParameter("Plate", plate) :
                new ObjectParameter("Plate", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var googleGuidParameter = googleGuid != null ?
                new ObjectParameter("GoogleGuid", googleGuid) :
                new ObjectParameter("GoogleGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFindCustomerByPhPlateEmail_Result>("uspFindCustomerByPhPlateEmail", plateParameter, phoneParameter, emailParameter, personGuidParameter, vehicleGuidParameter, googleGuidParameter);
        }
    
        public virtual ObjectResult<uspVerifyOTP_Result> uspVerifyOTP(Nullable<System.Guid> personGuid, string oTP)
        {
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVerifyOTP_Result>("uspVerifyOTP", personGuidParameter, oTPParameter);
        }
    
        public virtual ObjectResult<string> uspUpdtVehicleServiceAndKeyLockerBucket_PhoneCustomer(Nullable<int> dealerId, Nullable<System.Guid> vehicleServiceGuid, Nullable<System.Guid> vehicleGuid, string svcInfo, Nullable<byte> serviceStatusId, Nullable<byte> assignedKeyLockerBucketId)
        {
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var vehicleServiceGuidParameter = vehicleServiceGuid.HasValue ?
                new ObjectParameter("VehicleServiceGuid", vehicleServiceGuid) :
                new ObjectParameter("VehicleServiceGuid", typeof(System.Guid));
    
            var vehicleGuidParameter = vehicleGuid.HasValue ?
                new ObjectParameter("VehicleGuid", vehicleGuid) :
                new ObjectParameter("VehicleGuid", typeof(System.Guid));
    
            var svcInfoParameter = svcInfo != null ?
                new ObjectParameter("SvcInfo", svcInfo) :
                new ObjectParameter("SvcInfo", typeof(string));
    
            var serviceStatusIdParameter = serviceStatusId.HasValue ?
                new ObjectParameter("ServiceStatusId", serviceStatusId) :
                new ObjectParameter("ServiceStatusId", typeof(byte));
    
            var assignedKeyLockerBucketIdParameter = assignedKeyLockerBucketId.HasValue ?
                new ObjectParameter("AssignedKeyLockerBucketId", assignedKeyLockerBucketId) :
                new ObjectParameter("AssignedKeyLockerBucketId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdtVehicleServiceAndKeyLockerBucket_PhoneCustomer", dealerIdParameter, vehicleServiceGuidParameter, vehicleGuidParameter, svcInfoParameter, serviceStatusIdParameter, assignedKeyLockerBucketIdParameter);
        }
    }
}
